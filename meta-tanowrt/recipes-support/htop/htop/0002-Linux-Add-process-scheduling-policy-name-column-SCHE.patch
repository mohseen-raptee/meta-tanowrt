From ce4b99789279472b7141cfceb5a3b0345a2fc15c Mon Sep 17 00:00:00 2001
From: Anton Kikin <a.kikin@tano-systems.com>
Date: Wed, 17 Mar 2021 05:10:08 +0300
Subject: [PATCH] Linux: Add process scheduling policy name column (SCHED)

Signed-off-by: Anton Kikin <a.kikin@tano-systems.com>
---
 linux/LinuxProcess.c     | 20 ++++++++++++++++++++
 linux/LinuxProcess.h     |  4 ++++
 linux/LinuxProcessList.c |  2 ++
 linux/ProcessField.h     |  1 +
 4 files changed, 27 insertions(+)

diff --git a/linux/LinuxProcess.c b/linux/LinuxProcess.c
index ba2dbd46..34fabbe4 100644
--- a/linux/LinuxProcess.c
+++ b/linux/LinuxProcess.c
@@ -13,6 +13,7 @@ in the source distribution for its full text.
 #include <stdlib.h>
 #include <syscall.h>
 #include <unistd.h>
+#include <sched.h>
 
 #include "CRT.h"
 #include "Macros.h"
@@ -57,6 +58,7 @@ const ProcessFieldData Process_fields[LAST_PROCESSFIELD] = {
    [M_DRS] = { .name = "M_DRS", .title = " DATA ", .description = "Size of the data segment plus stack usage of the process", .flags = 0, .defaultSortDesc = true, },
    [M_LRS] = { .name = "M_LRS", .title = "  LIB ", .description = "The library size of the process (calculated from memory maps)", .flags = PROCESS_FLAG_LINUX_LRS_FIX, .defaultSortDesc = true, },
    [ST_UID] = { .name = "ST_UID", .title = "UID", .description = "User ID of the process owner", .flags = 0, },
+   [SCHED] = { .name = "SCHED", .title = "SCHED ", .description = "Scheduling polcy", .flags = 0, .defaultSortDesc = true, },
    [PERCENT_CPU] = { .name = "PERCENT_CPU", .title = "CPU% ", .description = "Percentage of the CPU time the process used in the last sampling", .flags = 0, .defaultSortDesc = true, },
    [PERCENT_NORM_CPU] = { .name = "PERCENT_NORM_CPU", .title = "NCPU%", .description = "Normalized percentage of the CPU time the process used in the last sampling (normalized by cpu count)", .flags = 0, .defaultSortDesc = true, },
    [PERCENT_MEM] = { .name = "PERCENT_MEM", .title = "MEM% ", .description = "Percentage of the memory the process is using, based on resident memory size", .flags = 0, .defaultSortDesc = true, },
@@ -142,6 +144,11 @@ static int LinuxProcess_effectiveIOPriority(const LinuxProcess* this) {
 #define SYS_ioprio_set __NR_ioprio_set
 #endif
 
+int LinuxProcess_updateSched(LinuxProcess* this) {
+   this->sched = sched_getscheduler(this->super.pid);
+   return this->sched;
+}
+
 IOPriority LinuxProcess_updateIOPriority(LinuxProcess* this) {
    IOPriority ioprio = 0;
 // Other OSes masquerading as Linux (NetBSD?) don't have this syscall
@@ -215,6 +222,17 @@ static void LinuxProcess_writeField(const Process* this, RichString* str, Proces
    case M_PSS: Process_printKBytes(str, lp->m_pss, coloring); return;
    case M_SWAP: Process_printKBytes(str, lp->m_swap, coloring); return;
    case M_PSSWP: Process_printKBytes(str, lp->m_psswp, coloring); return;
+   case SCHED:
+      switch(lp->sched) {
+          case SCHED_OTHER: xSnprintf(buffer, n, "OTHER "); break;
+          case SCHED_BATCH: xSnprintf(buffer, n, "BATCH "); break;
+          case SCHED_IDLE:  xSnprintf(buffer, n, "IDLE  "); break;
+          case SCHED_FIFO:  xSnprintf(buffer, n, "FIFO  "); break;
+          case SCHED_RR:    xSnprintf(buffer, n, "RR    "); break;
+          default:
+             xSnprintf(buffer, n, "%-3d   ", lp->sched); break;
+      }
+      break;
    case UTIME: Process_printTime(str, lp->utime, coloring); return;
    case STIME: Process_printTime(str, lp->stime, coloring); return;
    case CUTIME: Process_printTime(str, lp->cutime, coloring); return;
@@ -333,6 +351,8 @@ static int LinuxProcess_compareByKey(const Process* v1, const Process* v2, Proce
       return SPACESHIP_NUMBER(p1->m_swap, p2->m_swap);
    case M_PSSWP:
       return SPACESHIP_NUMBER(p1->m_psswp, p2->m_psswp);
+   case SCHED:
+      return SPACESHIP_NUMBER(p1->sched, p2->sched);
    case UTIME:
       return SPACESHIP_NUMBER(p1->utime, p2->utime);
    case CUTIME:
diff --git a/linux/LinuxProcess.h b/linux/LinuxProcess.h
index 3e5d3804..af1e0d46 100644
--- a/linux/LinuxProcess.h
+++ b/linux/LinuxProcess.h
@@ -48,6 +48,8 @@ typedef struct LinuxProcess_ {
    long m_drs;
    long m_lrs;
 
+   int sched;
+
    /* Process flags */
    unsigned long int flags;
 
@@ -124,6 +126,8 @@ void Process_delete(Object* cast);
 
 IOPriority LinuxProcess_updateIOPriority(LinuxProcess* this);
 
+int LinuxProcess_updateSched(LinuxProcess* this);
+
 bool LinuxProcess_setIOPriority(Process* this, Arg ioprio);
 
 bool LinuxProcess_isAutogroupEnabled(void);
diff --git a/linux/LinuxProcessList.c b/linux/LinuxProcessList.c
index 3bfe7db5..f9097612 100644
--- a/linux/LinuxProcessList.c
+++ b/linux/LinuxProcessList.c
@@ -1525,6 +1525,8 @@ static bool LinuxProcessList_recurseProcTree(LinuxProcessList* this, openat_arg_
          LinuxProcess_updateIOPriority(lp);
       }
 
+      LinuxProcess_updateSched(lp);
+
       /* period might be 0 after system sleep */
       float percent_cpu = (period < 1E-6) ? 0.0F : ((lp->utime + lp->stime - lasttimes) / period * 100.0);
       proc->percent_cpu = CLAMP(percent_cpu, 0.0F, activeCPUs * 100.0F);
diff --git a/linux/ProcessField.h b/linux/ProcessField.h
index 17cafa96..378f0dc3 100644
--- a/linux/ProcessField.h
+++ b/linux/ProcessField.h
@@ -19,6 +19,7 @@ in the source distribution for its full text.
    M_TRS = 42,                   \
    M_DRS = 43,                   \
    M_LRS = 44,                   \
+   SCHED = 70,                   \
    CTID = 100,                   \
    VPID = 101,                   \
    VXID = 102,                   \
-- 
2.34.1.windows.1

