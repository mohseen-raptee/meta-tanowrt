From 039cc1f4348017ae5af03d668be2dbd1f64e505b Mon Sep 17 00:00:00 2001
From: Anton Kikin <a.kikin@tano-systems.com>
Date: Wed, 8 Jan 2020 03:27:21 +0300
Subject: [PATCH 3/3] Make libubus thread safe

Make libubus thread safe by transforming global RW variables into
local equivalents. The remaining globals are read only constants.
There are no changes in the user API, however applications might
need a recompile due to a modified header file.

Original patch by Ronny Nilsson <ronnyn@southpole.se>

Signed-off-by: Anton Kikin <a.kikin@tano-systems.com>
---
 libubus-internal.h |  2 +-
 libubus-io.c       | 12 +++++------
 libubus-obj.c      | 42 +++++++++++++++++++-----------------
 libubus-req.c      | 53 +++++++++++++++++++++++-----------------------
 libubus-sub.c      |  8 +++----
 libubus.c          | 42 +++++++++++++++++-------------------
 libubus.h          |  1 +
 7 files changed, 80 insertions(+), 80 deletions(-)

diff --git a/libubus-internal.h b/libubus-internal.h
index 24477a0..9cda8c0 100644
--- a/libubus-internal.h
+++ b/libubus-internal.h
@@ -17,7 +17,7 @@
 extern struct blob_buf b;
 extern const struct ubus_method watch_method;
 
-struct blob_attr **ubus_parse_msg(struct blob_attr *msg, size_t len);
+void ubus_parse_msg(struct blob_attr **attr, struct blob_attr *msg, size_t len);
 bool ubus_validate_hdr(struct ubus_msghdr *hdr);
 void ubus_handle_data(struct uloop_fd *u, unsigned int events);
 int ubus_send_msg(struct ubus_context *ctx, uint32_t seq,
diff --git a/libubus-io.c b/libubus-io.c
index a1fb62b..9730130 100644
--- a/libubus-io.c
+++ b/libubus-io.c
@@ -31,7 +31,7 @@
 
 #define UBUS_MSGBUF_REDUCTION_INTERVAL	16
 
-static const struct blob_attr_info ubus_policy[UBUS_ATTR_MAX] = {
+static struct blob_attr_info const ubus_policy[UBUS_ATTR_MAX] = {
 	[UBUS_ATTR_STATUS] = { .type = BLOB_ATTR_INT32 },
 	[UBUS_ATTR_OBJID] = { .type = BLOB_ATTR_INT32 },
 	[UBUS_ATTR_OBJPATH] = { .type = BLOB_ATTR_STRING },
@@ -41,12 +41,10 @@ static const struct blob_attr_info ubus_policy[UBUS_ATTR_MAX] = {
 	[UBUS_ATTR_SUBSCRIBERS] = { .type = BLOB_ATTR_NESTED },
 };
 
-static struct blob_attr *attrbuf[UBUS_ATTR_MAX];
-
-__hidden struct blob_attr **ubus_parse_msg(struct blob_attr *msg, size_t len)
+__hidden void ubus_parse_msg(struct blob_attr **attrbuf, struct blob_attr *msg, size_t len)
 {
 	blob_parse_untrusted(msg, len, attrbuf, ubus_policy, UBUS_ATTR_MAX);
-	return attrbuf;
+	return;
 }
 
 static void wait_data(int fd, bool write)
@@ -138,8 +136,8 @@ int __hidden ubus_send_msg(struct ubus_context *ctx, uint32_t seq,
 	hdr.peer = cpu_to_be32(peer);
 
 	if (!msg) {
-		blob_buf_init(&b, 0);
-		msg = b.head;
+		blob_buf_init(&ctx->b, 0);
+		msg = ctx->b.head;
 	}
 
 	iov[1].iov_base = (char *) msg;
diff --git a/libubus-obj.c b/libubus-obj.c
index 29cbb2b..6afe6fe 100644
--- a/libubus-obj.c
+++ b/libubus-obj.c
@@ -117,11 +117,11 @@ void __hidden ubus_process_obj_msg(struct ubus_context *ctx, struct ubus_msghdr_
 	void (*cb)(struct ubus_context *, struct ubus_msghdr *,
 		   struct ubus_object *, struct blob_attr **, int fd);
 	struct ubus_msghdr *hdr = &buf->hdr;
-	struct blob_attr **attrbuf;
+	struct blob_attr *attrbuf[UBUS_ATTR_MAX];
 	struct ubus_object *obj;
 	uint32_t objid;
 	void *prev_data = NULL;
-	attrbuf = ubus_parse_msg(buf->data, blob_raw_len(buf->data));
+	ubus_parse_msg(attrbuf, buf->data, blob_raw_len(buf->data));
 	if (!attrbuf[UBUS_ATTR_OBJID])
 		return;
 
@@ -160,7 +160,8 @@ void __hidden ubus_process_obj_msg(struct ubus_context *ctx, struct ubus_msghdr_
 static void ubus_add_object_cb(struct ubus_request *req, int type, struct blob_attr *msg)
 {
 	struct ubus_object *obj = req->priv;
-	struct blob_attr **attrbuf = ubus_parse_msg(msg, blob_raw_len(msg));
+	struct blob_attr *attrbuf[UBUS_ATTR_MAX];
+	ubus_parse_msg(attrbuf, msg, blob_raw_len(msg));
 
 	if (!attrbuf[UBUS_ATTR_OBJID])
 		return;
@@ -174,34 +175,34 @@ static void ubus_add_object_cb(struct ubus_request *req, int type, struct blob_a
 	avl_insert(&req->ctx->objects, &obj->avl);
 }
 
-static void ubus_push_method_data(const struct ubus_method *m)
+static void ubus_push_method_data(struct blob_buf *b, const struct ubus_method *m)
 {
 	void *mtbl;
 	int i;
 
-	mtbl = blobmsg_open_table(&b, m->name);
+	mtbl = blobmsg_open_table(b, m->name);
 
 	for (i = 0; i < m->n_policy; i++) {
 		if (m->mask && !(m->mask & (1 << i)))
 			continue;
 
-		blobmsg_add_u32(&b, m->policy[i].name, m->policy[i].type);
+		blobmsg_add_u32(b, m->policy[i].name, m->policy[i].type);
 	}
 
-	blobmsg_close_table(&b, mtbl);
+	blobmsg_close_table(b, mtbl);
 }
 
-static bool ubus_push_object_type(const struct ubus_object_type *type)
+static bool ubus_push_object_type(struct blob_buf *b, const struct ubus_object_type *type)
 {
 	void *s;
 	int i;
 
-	s = blob_nest_start(&b, UBUS_ATTR_SIGNATURE);
+	s = blob_nest_start(b, UBUS_ATTR_SIGNATURE);
 
 	for (i = 0; i < type->n_methods; i++)
-		ubus_push_method_data(&type->methods[i]);
+		ubus_push_method_data(b, &type->methods[i]);
 
-	blob_nest_end(&b, s);
+	blob_nest_end(b, s);
 
 	return true;
 }
@@ -211,18 +212,18 @@ int ubus_add_object(struct ubus_context *ctx, struct ubus_object *obj)
 	struct ubus_request req;
 	int ret;
 
-	blob_buf_init(&b, 0);
+	blob_buf_init(&ctx->b, 0);
 
 	if (obj->name && obj->type) {
-		blob_put_string(&b, UBUS_ATTR_OBJPATH, obj->name);
+		blob_put_string(&ctx->b, UBUS_ATTR_OBJPATH, obj->name);
 
 		if (obj->type->id)
-			blob_put_int32(&b, UBUS_ATTR_OBJTYPE, obj->type->id);
-		else if (!ubus_push_object_type(obj->type))
+			blob_put_int32(&ctx->b, UBUS_ATTR_OBJTYPE, obj->type->id);
+		else if (!ubus_push_object_type(&ctx->b, obj->type))
 			return UBUS_STATUS_INVALID_ARGUMENT;
 	}
 
-	if (ubus_start_request(ctx, &req, b.head, UBUS_MSG_ADD_OBJECT, 0) < 0)
+	if (ubus_start_request(ctx, &req, ctx->b.head, UBUS_MSG_ADD_OBJECT, 0) < 0)
 		return UBUS_STATUS_INVALID_ARGUMENT;
 
 	req.raw_data_cb = ubus_add_object_cb;
@@ -240,7 +241,8 @@ int ubus_add_object(struct ubus_context *ctx, struct ubus_object *obj)
 static void ubus_remove_object_cb(struct ubus_request *req, int type, struct blob_attr *msg)
 {
 	struct ubus_object *obj = req->priv;
-	struct blob_attr **attrbuf = ubus_parse_msg(msg, blob_raw_len(msg));
+	struct blob_attr *attrbuf[UBUS_ATTR_MAX];
+	ubus_parse_msg(attrbuf, msg, blob_raw_len(msg));
 
 	if (!attrbuf[UBUS_ATTR_OBJID])
 		return;
@@ -258,10 +260,10 @@ int ubus_remove_object(struct ubus_context *ctx, struct ubus_object *obj)
 	struct ubus_request req;
 	int ret;
 
-	blob_buf_init(&b, 0);
-	blob_put_int32(&b, UBUS_ATTR_OBJID, obj->id);
+	blob_buf_init(&ctx->b, 0);
+	blob_put_int32(&ctx->b, UBUS_ATTR_OBJID, obj->id);
 
-	if (ubus_start_request(ctx, &req, b.head, UBUS_MSG_REMOVE_OBJECT, 0) < 0)
+	if (ubus_start_request(ctx, &req, ctx->b.head, UBUS_MSG_REMOVE_OBJECT, 0) < 0)
 		return UBUS_STATUS_INVALID_ARGUMENT;
 
 	req.raw_data_cb = ubus_remove_object_cb;
diff --git a/libubus-req.c b/libubus-req.c
index ae9d192..84fd578 100644
--- a/libubus-req.c
+++ b/libubus-req.c
@@ -23,7 +23,7 @@ struct ubus_pending_data {
 
 static void req_data_cb(struct ubus_request *req, int type, struct blob_attr *data)
 {
-	struct blob_attr **attr;
+	struct blob_attr *attr[UBUS_ATTR_MAX];
 
 	if (req->raw_data_cb)
 		req->raw_data_cb(req, type, data);
@@ -31,7 +31,7 @@ static void req_data_cb(struct ubus_request *req, int type, struct blob_attr *da
 	if (!req->data_cb)
 		return;
 
-	attr = ubus_parse_msg(data, blob_raw_len(data));
+	ubus_parse_msg(attr, data, blob_raw_len(data));
 	if (!attr[UBUS_ATTR_DATA])
 		return;
 
@@ -188,10 +188,10 @@ int ubus_complete_request(struct ubus_context *ctx, struct ubus_request *req,
 
 void ubus_complete_deferred_request(struct ubus_context *ctx, struct ubus_request_data *req, int ret)
 {
-	blob_buf_init(&b, 0);
-	blob_put_int32(&b, UBUS_ATTR_STATUS, ret);
-	blob_put_int32(&b, UBUS_ATTR_OBJID, req->object);
-	ubus_send_msg(ctx, req->seq, b.head, UBUS_MSG_STATUS, req->peer, req->fd);
+	blob_buf_init(&ctx->b, 0);
+	blob_put_int32(&ctx->b, UBUS_ATTR_STATUS, ret);
+	blob_put_int32(&ctx->b, UBUS_ATTR_OBJID, req->object);
+	ubus_send_msg(ctx, req->seq, ctx->b.head, UBUS_MSG_STATUS, req->peer, req->fd);
 }
 
 static void ubus_put_data(struct blob_buf *buf, struct blob_attr *msg)
@@ -207,10 +207,10 @@ int ubus_send_reply(struct ubus_context *ctx, struct ubus_request_data *req,
 {
 	int ret;
 
-	blob_buf_init(&b, 0);
-	blob_put_int32(&b, UBUS_ATTR_OBJID, req->object);
-	ubus_put_data(&b, msg);
-	ret = ubus_send_msg(ctx, req->seq, b.head, UBUS_MSG_DATA, req->peer, -1);
+	blob_buf_init(&ctx->b, 0);
+	blob_put_int32(&ctx->b, UBUS_ATTR_OBJID, req->object);
+	ubus_put_data(&ctx->b, msg);
+	ret = ubus_send_msg(ctx, req->seq, ctx->b.head, UBUS_MSG_DATA, req->peer, -1);
 	if (ret < 0)
 		return UBUS_STATUS_NO_DATA;
 
@@ -221,14 +221,14 @@ int ubus_invoke_async_fd(struct ubus_context *ctx, uint32_t obj,
 			 const char *method, struct blob_attr *msg,
 			 struct ubus_request *req, int fd)
 {
-	blob_buf_init(&b, 0);
-	blob_put_int32(&b, UBUS_ATTR_OBJID, obj);
-	blob_put_string(&b, UBUS_ATTR_METHOD, method);
-	ubus_put_data(&b, msg);
+	blob_buf_init(&ctx->b, 0);
+	blob_put_int32(&ctx->b, UBUS_ATTR_OBJID, obj);
+	blob_put_string(&ctx->b, UBUS_ATTR_METHOD, method);
+	ubus_put_data(&ctx->b, msg);
 
 	memset(req, 0, sizeof(*req));
 	req->fd = fd;
-	if (__ubus_start_request(ctx, req, b.head, UBUS_MSG_INVOKE, obj) < 0)
+	if (__ubus_start_request(ctx, req, ctx->b.head, UBUS_MSG_INVOKE, obj) < 0)
 		return UBUS_STATUS_INVALID_ARGUMENT;
 	return 0;
 }
@@ -280,15 +280,15 @@ __ubus_notify_async(struct ubus_context *ctx, struct ubus_object *obj,
 {
 	memset(req, 0, sizeof(*req));
 
-	blob_buf_init(&b, 0);
-	blob_put_int32(&b, UBUS_ATTR_OBJID, obj->id);
-	blob_put_string(&b, UBUS_ATTR_METHOD, type);
-	ubus_put_data(&b, msg);
+	blob_buf_init(&ctx->b, 0);
+	blob_put_int32(&ctx->b, UBUS_ATTR_OBJID, obj->id);
+	blob_put_string(&ctx->b, UBUS_ATTR_METHOD, type);
+	ubus_put_data(&ctx->b, msg);
 
 	if (!reply)
-		blob_put_int8(&b, UBUS_ATTR_NO_REPLY, true);
+		blob_put_int8(&ctx->b, UBUS_ATTR_NO_REPLY, true);
 
-	if (ubus_start_request(ctx, &req->req, b.head, UBUS_MSG_NOTIFY, obj->id) < 0)
+	if (ubus_start_request(ctx, &req->req, ctx->b.head, UBUS_MSG_NOTIFY, obj->id) < 0)
 		return UBUS_STATUS_INVALID_ARGUMENT;
 
 	/* wait for status message from ubusd first */
@@ -328,7 +328,8 @@ int ubus_notify(struct ubus_context *ctx, struct ubus_object *obj,
 
 static bool ubus_get_status(struct ubus_msghdr_buf *buf, int *ret)
 {
-	struct blob_attr **attrbuf = ubus_parse_msg(buf->data, blob_raw_len(buf->data));
+	struct blob_attr *attrbuf[UBUS_ATTR_MAX];
+	ubus_parse_msg(attrbuf, buf->data, blob_raw_len(buf->data));
 
 	if (!attrbuf[UBUS_ATTR_STATUS])
 		return false;
@@ -424,7 +425,7 @@ ubus_find_request(struct ubus_context *ctx, uint32_t seq, uint32_t peer, int *id
 static void ubus_process_notify_status(struct ubus_request *req, int id, struct ubus_msghdr_buf *buf)
 {
 	struct ubus_notify_request *nreq;
-	struct blob_attr **tb;
+	struct blob_attr *tb[UBUS_ATTR_MAX];
 	struct blob_attr *cur;
 	size_t rem;
 	int idx = 1;
@@ -435,7 +436,7 @@ static void ubus_process_notify_status(struct ubus_request *req, int id, struct
 
 	if (!id) {
 		/* first id: ubusd's status message with a list of ids */
-		tb = ubus_parse_msg(buf->data, blob_raw_len(buf->data));
+		ubus_parse_msg(tb, buf->data, blob_raw_len(buf->data));
 		if (tb[UBUS_ATTR_SUBSCRIBERS]) {
 			blob_for_each_attr(cur, tb[UBUS_ATTR_SUBSCRIBERS], rem) {
 				if (!blob_check_type(blob_data(cur), blob_len(cur), BLOB_ATTR_INT32))
@@ -494,6 +495,6 @@ void __hidden ubus_process_req_msg(struct ubus_context *ctx, struct ubus_msghdr_
 
 int __ubus_monitor(struct ubus_context *ctx, const char *type)
 {
-	blob_buf_init(&b, 0);
-	return ubus_invoke(ctx, UBUS_SYSTEM_OBJECT_MONITOR, type, b.head, NULL, NULL, 1000);
+	blob_buf_init(&ctx->b, 0);
+	return ubus_invoke(ctx, UBUS_SYSTEM_OBJECT_MONITOR, type, ctx->b.head, NULL, NULL, 1000);
 }
diff --git a/libubus-sub.c b/libubus-sub.c
index 8793133..a4de5eb 100644
--- a/libubus-sub.c
+++ b/libubus-sub.c
@@ -46,11 +46,11 @@ __ubus_subscribe_request(struct ubus_context *ctx, struct ubus_object *obj, uint
 {
 	struct ubus_request req;
 
-	blob_buf_init(&b, 0);
-	blob_put_int32(&b, UBUS_ATTR_OBJID, obj->id);
-	blob_put_int32(&b, UBUS_ATTR_TARGET, id);
+	blob_buf_init(&ctx->b, 0);
+	blob_put_int32(&ctx->b, UBUS_ATTR_OBJID, obj->id);
+	blob_put_int32(&ctx->b, UBUS_ATTR_TARGET, id);
 
-	if (ubus_start_request(ctx, &req, b.head, type, 0) < 0)
+	if (ubus_start_request(ctx, &req, ctx->b.head, type, 0) < 0)
 		return UBUS_STATUS_INVALID_ARGUMENT;
 
 	return ubus_complete_request(ctx, &req, 0);
diff --git a/libubus.c b/libubus.c
index fc0d933..bf78ab1 100644
--- a/libubus.c
+++ b/libubus.c
@@ -22,7 +22,7 @@
 #include "libubus-internal.h"
 #include "ubusmsg.h"
 
-const char *__ubus_strerror[__UBUS_STATUS_LAST] = {
+static const char * const __ubus_strerror[__UBUS_STATUS_LAST] = {
 	[UBUS_STATUS_OK] = "Success",
 	[UBUS_STATUS_INVALID_COMMAND] = "Invalid command",
 	[UBUS_STATUS_INVALID_ARGUMENT] = "Invalid argument",
@@ -39,8 +39,6 @@ const char *__ubus_strerror[__UBUS_STATUS_LAST] = {
 	[UBUS_STATUS_SYSTEM_ERROR] = "System error",
 };
 
-struct blob_buf b __hidden = {};
-
 struct ubus_pending_msg {
 	struct list_head list;
 	struct ubus_msghdr_buf hdr;
@@ -142,10 +140,10 @@ static void ubus_lookup_cb(struct ubus_request *ureq, int type, struct blob_attr
 {
 	struct ubus_lookup_request *req;
 	struct ubus_object_data obj = {};
-	struct blob_attr **attr;
+	struct blob_attr *attr[UBUS_ATTR_MAX];
 
 	req = container_of(ureq, struct ubus_lookup_request, req);
-	attr = ubus_parse_msg(msg, blob_raw_len(msg));
+	ubus_parse_msg(attr, msg, blob_raw_len(msg));
 
 	if (!attr[UBUS_ATTR_OBJID] || !attr[UBUS_ATTR_OBJPATH] ||
 	    !attr[UBUS_ATTR_OBJTYPE])
@@ -163,11 +161,11 @@ int ubus_lookup(struct ubus_context *ctx, const char *path,
 {
 	struct ubus_lookup_request lookup;
 
-	blob_buf_init(&b, 0);
+	blob_buf_init(&ctx->b, 0);
 	if (path)
-		blob_put_string(&b, UBUS_ATTR_OBJPATH, path);
+		blob_put_string(&ctx->b, UBUS_ATTR_OBJPATH, path);
 
-	if (ubus_start_request(ctx, &lookup.req, b.head, UBUS_MSG_LOOKUP, 0) < 0)
+	if (ubus_start_request(ctx, &lookup.req, ctx->b.head, UBUS_MSG_LOOKUP, 0) < 0)
 		return UBUS_STATUS_INVALID_ARGUMENT;
 
 	lookup.req.raw_data_cb = ubus_lookup_cb;
@@ -178,10 +176,10 @@ int ubus_lookup(struct ubus_context *ctx, const char *path,
 
 static void ubus_lookup_id_cb(struct ubus_request *req, int type, struct blob_attr *msg)
 {
-	struct blob_attr **attr;
+	struct blob_attr *attr[UBUS_ATTR_MAX];
 	uint32_t *id = req->priv;
 
-	attr = ubus_parse_msg(msg, blob_raw_len(msg));
+	ubus_parse_msg(attr, msg, blob_raw_len(msg));
 
 	if (!attr[UBUS_ATTR_OBJID])
 		return;
@@ -193,11 +191,11 @@ int ubus_lookup_id(struct ubus_context *ctx, const char *path, uint32_t *id)
 {
 	struct ubus_request req;
 
-	blob_buf_init(&b, 0);
+	blob_buf_init(&ctx->b, 0);
 	if (path)
-		blob_put_string(&b, UBUS_ATTR_OBJPATH, path);
+		blob_put_string(&ctx->b, UBUS_ATTR_OBJPATH, path);
 
-	if (ubus_start_request(ctx, &req, b.head, UBUS_MSG_LOOKUP, 0) < 0)
+	if (ubus_start_request(ctx, &req, ctx->b.head, UBUS_MSG_LOOKUP, 0) < 0)
 		return UBUS_STATUS_INVALID_ARGUMENT;
 
 	req.raw_data_cb = ubus_lookup_id_cb;
@@ -261,15 +259,15 @@ int ubus_send_event(struct ubus_context *ctx, const char *id,
 	struct ubus_request req;
 	void *s;
 
-	blob_buf_init(&b, 0);
-	blob_put_int32(&b, UBUS_ATTR_OBJID, UBUS_SYSTEM_OBJECT_EVENT);
-	blob_put_string(&b, UBUS_ATTR_METHOD, "send");
-	s = blob_nest_start(&b, UBUS_ATTR_DATA);
-	blobmsg_add_string(&b, "id", id);
-	blobmsg_add_field(&b, BLOBMSG_TYPE_TABLE, "data", blob_data(data), blob_len(data));
-	blob_nest_end(&b, s);
+	blob_buf_init(&ctx->b, 0);
+	blob_put_int32(&ctx->b, UBUS_ATTR_OBJID, UBUS_SYSTEM_OBJECT_EVENT);
+	blob_put_string(&ctx->b, UBUS_ATTR_METHOD, "send");
+	s = blob_nest_start(&ctx->b, UBUS_ATTR_DATA);
+	blobmsg_add_string(&ctx->b, "id", id);
+	blobmsg_add_field(&ctx->b, BLOBMSG_TYPE_TABLE, "data", blob_data(data), blob_len(data));
+	blob_nest_end(&ctx->b, s);
 
-	if (ubus_start_request(ctx, &req, b.head, UBUS_MSG_INVOKE, UBUS_SYSTEM_OBJECT_EVENT) < 0)
+	if (ubus_start_request(ctx, &req, ctx->b.head, UBUS_MSG_INVOKE, UBUS_SYSTEM_OBJECT_EVENT) < 0)
 		return UBUS_STATUS_INVALID_ARGUMENT;
 
 	return ubus_complete_request(ctx, &req, 0);
@@ -365,7 +363,7 @@ struct ubus_context *ubus_connect(const char *path)
 
 void ubus_shutdown(struct ubus_context *ctx)
 {
-	blob_buf_free(&b);
+	blob_buf_free(&ctx->b);
 	if (!ctx)
 		return;
 	close(ctx->sock.fd);
diff --git a/libubus.h b/libubus.h
index 6925514..e33e084 100644
--- a/libubus.h
+++ b/libubus.h
@@ -170,6 +170,7 @@ struct ubus_context {
 	struct ubus_msghdr_buf msgbuf;
 	uint32_t msgbuf_data_len;
 	int msgbuf_reduction_counter;
+	struct blob_buf b;
 };
 
 struct ubus_object_data {
-- 
2.34.1.windows.1

