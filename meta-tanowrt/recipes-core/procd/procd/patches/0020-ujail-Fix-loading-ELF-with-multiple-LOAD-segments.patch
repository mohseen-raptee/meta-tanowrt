From 6057b6104bda63392af0183c3466fec35d256c2d Mon Sep 17 00:00:00 2001
From: Anton Kikin <a.kikin@tano-systems.com>
Date: Wed, 24 Feb 2021 17:13:46 +0300
Subject: [PATCH 20/24] ujail: Fix loading ELF with multiple LOAD segments

Signed-off-by: Anton Kikin <a.kikin@tano-systems.com>
---
 jail/elf.c | 64 ++++++++++++++++++++++++++++++++++++------------------
 1 file changed, 43 insertions(+), 21 deletions(-)

diff --git a/jail/elf.c b/jail/elf.c
index dc6e7b7..8832dc1 100644
--- a/jail/elf.c
+++ b/jail/elf.c
@@ -103,7 +103,7 @@ const char* find_lib(const char *file)
 	return l->path;
 }
 
-static int elf64_find_section(const char *map, unsigned int type, unsigned long *offset, unsigned long *size, unsigned long *vaddr)
+static int elf64_find_section(const char *map, unsigned int type, unsigned long *offset, unsigned long *size, unsigned long *vaddr, unsigned long *search_addr)
 {
 	Elf64_Ehdr *e;
 	Elf64_Phdr *ph;
@@ -114,6 +114,12 @@ static int elf64_find_section(const char *map, unsigned int type, unsigned long
 
 	for (i = 0; i < e->e_phnum; i++) {
 		if (ph[i].p_type == type) {
+			if (search_addr) {
+				if ((*search_addr < ph[i].p_vaddr) ||
+				    (*search_addr > (ph[i].p_vaddr + ph[i].p_memsz)))
+					continue;
+			}
+
 			*offset = ph[i].p_offset;
 			if (size)
 				*size = ph[i].p_filesz;
@@ -126,7 +132,7 @@ static int elf64_find_section(const char *map, unsigned int type, unsigned long
 	return -1;
 }
 
-static int elf32_find_section(const char *map, unsigned int type, unsigned long *offset, unsigned long *size, unsigned long *vaddr)
+static int elf32_find_section(const char *map, unsigned int type, unsigned long *offset, unsigned long *size, unsigned long *vaddr, unsigned long *search_addr)
 {
 	Elf32_Ehdr *e;
 	Elf32_Phdr *ph;
@@ -137,6 +143,12 @@ static int elf32_find_section(const char *map, unsigned int type, unsigned long
 
 	for (i = 0; i < e->e_phnum; i++) {
 		if (ph[i].p_type == type) {
+			if (search_addr) {
+				if ((*search_addr < ph[i].p_vaddr) ||
+				    (*search_addr > (ph[i].p_vaddr + ph[i].p_memsz)))
+					continue;
+			}
+
 			*offset = ph[i].p_offset;
 			if (size)
 				*size = ph[i].p_filesz;
@@ -149,22 +161,26 @@ static int elf32_find_section(const char *map, unsigned int type, unsigned long
 	return -1;
 }
 
-static int elf_find_section(const char *map, unsigned int type, unsigned long *offset, unsigned long *size, unsigned long *vaddr)
+static int elf_find_section(const char *map, unsigned int type, unsigned long *offset, unsigned long *size, unsigned long *vaddr, unsigned long *search_addr)
 {
 	int clazz = map[EI_CLASS];
 
 	if (clazz == ELFCLASS32)
-		return elf32_find_section(map, type, offset, size, vaddr);
+		return elf32_find_section(map, type, offset, size, vaddr, search_addr);
 	else if (clazz == ELFCLASS64)
-		return elf64_find_section(map, type, offset, size, vaddr);
+		return elf64_find_section(map, type, offset, size, vaddr, search_addr);
 
 	ERROR("unknown elf format %d\n", clazz);
 
 	return -1;
 }
 
-static int elf32_scan_dynamic(const char *map, unsigned long dyn_offset, unsigned long dyn_size, long load_offset)
+static int elf32_scan_dynamic(const char *map, unsigned long dyn_offset, unsigned long dyn_size)
 {
+	unsigned long search_addr;
+	unsigned long load_offset;
+	unsigned long load_vaddr;
+
 	Elf32_Dyn *dynamic = (Elf32_Dyn *) (map + dyn_offset);
 	const char *strtab = NULL;
 
@@ -175,15 +191,19 @@ static int elf32_scan_dynamic(const char *map, unsigned long dyn_offset, unsigne
 		if (curr->d_tag != DT_STRTAB)
 			continue;
 
-		strtab = map + (curr->d_un.d_ptr - load_offset);
+		/* Find assicated LOAD section */
+		search_addr = (unsigned long)curr->d_un.d_ptr;
+		elf_find_section(map, PT_LOAD, &load_offset, NULL, &load_vaddr, &search_addr);
+
+		strtab = map + (curr->d_un.d_ptr - (uintptr_t)(load_vaddr - load_offset));
 		break;
 	}
 
 	if (!strtab)
 		return -1;
 
-	dynamic = (Elf32_Dyn *) (map + dyn_offset);
-	while ((void *) dynamic < (void *) (map + dyn_offset + dyn_size)) {
+	dynamic = (Elf32_Dyn *) (map + (uintptr_t)dyn_offset);
+	while ((void *) dynamic < (void *) (map + (uintptr_t)dyn_offset + (uintptr_t)dyn_size)) {
 		Elf32_Dyn *curr = dynamic;
 
 		dynamic++;
@@ -197,8 +217,12 @@ static int elf32_scan_dynamic(const char *map, unsigned long dyn_offset, unsigne
 	return 0;
 }
 
-static int elf64_scan_dynamic(const char *map, unsigned long dyn_offset, unsigned long dyn_size, long load_offset)
+static int elf64_scan_dynamic(const char *map, unsigned long dyn_offset, unsigned long dyn_size)
 {
+	unsigned long search_addr;
+	unsigned long load_offset;
+	unsigned long load_vaddr;
+
 	Elf64_Dyn *dynamic = (Elf64_Dyn *) (map + dyn_offset);
 	const char *strtab = NULL;
 
@@ -209,7 +233,11 @@ static int elf64_scan_dynamic(const char *map, unsigned long dyn_offset, unsigne
 		if (curr->d_tag != DT_STRTAB)
 			continue;
 
-		strtab = map + (curr->d_un.d_ptr - load_offset);
+		/* Find assicated LOAD section */
+		search_addr = (unsigned long)curr->d_un.d_ptr;
+		elf_find_section(map, PT_LOAD, &load_offset, NULL, &load_vaddr, &search_addr);
+
+		strtab = map + (curr->d_un.d_ptr - (uintptr_t)(load_vaddr - load_offset));
 		break;
 	}
 
@@ -234,19 +262,13 @@ static int elf64_scan_dynamic(const char *map, unsigned long dyn_offset, unsigne
 int elf_load_deps(const char *path, const char *map)
 {
 	unsigned long dyn_offset, dyn_size;
-	unsigned long load_offset, load_vaddr;
 	unsigned long interp_offset;
 
-	if (elf_find_section(map, PT_INTERP, &interp_offset, NULL, NULL) == 0) {
+	if (elf_find_section(map, PT_INTERP, &interp_offset, NULL, NULL, NULL) == 0) {
 		add_path_and_deps(map+interp_offset, 1, -1, 0);
 	}
 
-	if (elf_find_section(map, PT_LOAD, &load_offset, NULL, &load_vaddr)) {
-		DEBUG("failed to load the .load section from %s\n", path);
-		return 0;
-	}
-
-	if (elf_find_section(map, PT_DYNAMIC, &dyn_offset, &dyn_size, NULL)) {
+	if (elf_find_section(map, PT_DYNAMIC, &dyn_offset, &dyn_size, NULL, NULL)) {
 		DEBUG("failed to load the .dynamic section from %s\n", path);
 		return 0;
 	}
@@ -254,9 +276,9 @@ int elf_load_deps(const char *path, const char *map)
 	int clazz = map[EI_CLASS];
 
 	if (clazz == ELFCLASS32)
-		return elf32_scan_dynamic(map, dyn_offset, dyn_size, load_vaddr - load_offset);
+		return elf32_scan_dynamic(map, dyn_offset, dyn_size);
 	else if (clazz == ELFCLASS64)
-		return elf64_scan_dynamic(map, dyn_offset, dyn_size, load_vaddr - load_offset);
+		return elf64_scan_dynamic(map, dyn_offset, dyn_size);
 
 	ERROR("unknown elf format %d\n", clazz);
 	return -1;
-- 
2.34.1.windows.1

