From 81325835cc36fa44067bc46cf80a28f91fb22ddf Mon Sep 17 00:00:00 2001
From: Anton Kikin <a.kikin@tano-systems.com>
Date: Wed, 27 Feb 2019 00:20:01 +0300
Subject: [PATCH 04/24] hotplug: Completely remove hotplug functionality

Signed-off-by: Anton Kikin <a.kikin@tano-systems.com>
---
 CMakeLists.txt  |   2 +-
 initd/preinit.c |  24 --
 plug/coldplug.c |  74 ------
 plug/hotplug.c  | 651 ------------------------------------------------
 plug/hotplug.h  |  49 ----
 procd.c         |   6 +-
 state.c         |  10 -
 7 files changed, 2 insertions(+), 814 deletions(-)
 delete mode 100644 plug/coldplug.c
 delete mode 100644 plug/hotplug.c
 delete mode 100644 plug/hotplug.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 488c555..7a5cdcf 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,7 +22,7 @@ SET(SOURCES procd.c signal.c state.c hotplug-dispatch.c inittab.c rcS.c ubus.c
 	system.c sysupgrade.c service/service.c service/instance.c
 	service/validate.c service/trigger.c service/watch.c utils/utils.c)
 IF(NOT DISABLE_INIT)
-  SET(SOURCES ${SOURCES} watchdog.c plug/coldplug.c plug/hotplug.c)
+  SET(SOURCES ${SOURCES} watchdog.c)
 ENDIF()
 
 FIND_LIBRARY(ubox NAMES ubox)
diff --git a/initd/preinit.c b/initd/preinit.c
index 46411aa..bdd894e 100644
--- a/initd/preinit.c
+++ b/initd/preinit.c
@@ -31,7 +31,6 @@
 #include "../sysupgrade.h"
 
 static struct uloop_process preinit_proc;
-static struct uloop_process plugd_proc;
 
 static void
 check_dbglvl(void)
@@ -94,9 +93,6 @@ spawn_procd(struct uloop_process *proc, int ret)
 	char *argv[] = { "/sbin/procd", NULL};
 	char dbg[2];
 
-	if (plugd_proc.pid > 0)
-		kill(plugd_proc.pid, SIGKILL);
-
 	unsetenv("PREINIT");
 	unlink("/tmp/.preinit");
 
@@ -114,34 +110,14 @@ spawn_procd(struct uloop_process *proc, int ret)
 	execvp(argv[0], argv);
 }
 
-static void
-plugd_proc_cb(struct uloop_process *proc, int ret)
-{
-	proc->pid = 0;
-}
-
 void
 preinit(void)
 {
 	char *init[] = { "/bin/sh", "/etc/preinit", NULL };
-	char *plug[] = { "/sbin/procd", "-h", "/etc/hotplug-preinit.json", NULL };
 	int fd;
 
 	LOG("- preinit -\n");
 
-	plugd_proc.cb = plugd_proc_cb;
-	plugd_proc.pid = fork();
-	if (!plugd_proc.pid) {
-		execvp(plug[0], plug);
-		ERROR("Failed to start plugd: %m\n");
-		exit(EXIT_FAILURE);
-	}
-	if (plugd_proc.pid <= 0) {
-		ERROR("Failed to start new plugd instance: %m\n");
-		return;
-	}
-	uloop_process_add(&plugd_proc);
-
 	setenv("PREINIT", "1", 1);
 
 	fd = creat("/tmp/.preinit", 0600);
diff --git a/plug/coldplug.c b/plug/coldplug.c
deleted file mode 100644
index 308b79d..0000000
--- a/plug/coldplug.c
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (C) 2013 Felix Fietkau <nbd@openwrt.org>
- * Copyright (C) 2013 John Crispin <blogic@openwrt.org>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 2.1
- * as published by the Free Software Foundation
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <sys/stat.h>
-#include <sys/types.h>
-#include <sys/mount.h>
-
-#include <stdlib.h>
-#include <unistd.h>
-
-#include "../procd.h"
-#include "../libc-compat.h"
-
-#include "hotplug.h"
-#include "../container.h"
-
-static struct uloop_process udevtrigger;
-
-static void coldplug_complete(struct uloop_timeout *t)
-{
-	DEBUG(4, "Coldplug complete\n");
-	hotplug_last_event(NULL);
-	procd_state_next();
-}
-
-static void udevtrigger_complete(struct uloop_process *proc, int ret)
-{
-	DEBUG(4, "Finished udevtrigger\n");
-	hotplug_last_event(coldplug_complete);
-}
-
-void procd_coldplug(void)
-{
-	char *argv[] = { "udevtrigger", NULL };
-	unsigned int oldumask = umask(0);
-
-	if (!is_container()) {
-		umount2("/dev/pts", MNT_DETACH);
-		umount2("/dev/", MNT_DETACH);
-		mount("tmpfs", "/dev", "tmpfs", MS_NOATIME | MS_NOEXEC | MS_NOSUID, "mode=0755,size=512K");
-		mkdir("/dev/pts", 0755);
-		mount("devpts", "/dev/pts", "devpts", MS_NOATIME | MS_NOEXEC | MS_NOSUID, 0);
-	}
-
-	ignore(symlink("/tmp/shm", "/dev/shm"));
-	umask(oldumask);
-	udevtrigger.cb = udevtrigger_complete;
-	udevtrigger.pid = fork();
-	if (!udevtrigger.pid) {
-		execvp(argv[0], argv);
-		ERROR("Failed to start coldplug: %m\n");
-		exit(EXIT_FAILURE);
-	}
-
-	if (udevtrigger.pid <= 0) {
-		ERROR("Failed to start new coldplug instance: %m\n");
-		return;
-	}
-
-	uloop_process_add(&udevtrigger);
-
-	DEBUG(4, "Launched coldplug instance, pid=%d\n", (int) udevtrigger.pid);
-}
diff --git a/plug/hotplug.c b/plug/hotplug.c
deleted file mode 100644
index b1a61b2..0000000
--- a/plug/hotplug.c
+++ /dev/null
@@ -1,651 +0,0 @@
-/*
- * Copyright (C) 2013 Felix Fietkau <nbd@openwrt.org>
- * Copyright (C) 2013 John Crispin <blogic@openwrt.org>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 2.1
- * as published by the Free Software Foundation
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <sys/stat.h>
-#include <sys/socket.h>
-#include <sys/types.h>
-#include <sys/sysmacros.h>
-
-#include <linux/types.h>
-#include <linux/netlink.h>
-
-#include <libubox/blobmsg_json.h>
-#include <libubox/json_script.h>
-#include <libubox/uloop.h>
-#include <libubox/utils.h>
-#include <json-c/json.h>
-
-#include <errno.h>
-#include <fcntl.h>
-#include <unistd.h>
-#include <stdlib.h>
-#include <libgen.h>
-#include <grp.h>
-
-#include "../procd.h"
-
-#include "hotplug.h"
-
-#define HOTPLUG_WAIT	500
-
-struct cmd_handler;
-struct cmd_queue {
-	struct list_head list;
-
-	struct blob_attr *msg;
-	struct blob_attr *data;
-	int timeout;
-
-	void (*handler)(struct blob_attr *msg, struct blob_attr *data);
-	void (*start)(struct blob_attr *msg, struct blob_attr *data);
-	void (*complete)(struct blob_attr *msg, struct blob_attr *data, int ret);
-};
-
-struct button_timeout {
-	struct list_head list;
-	struct uloop_timeout timeout;
-	char *name;
-	int seen;
-	struct blob_attr *data;
-};
-
-static LIST_HEAD(cmd_queue);
-static LIST_HEAD(button_timer);
-static struct uloop_process queue_proc;
-static struct uloop_timeout last_event;
-static struct blob_buf b, button_buf;
-static char *rule_file;
-static struct blob_buf script;
-static struct cmd_queue *current;
-
-static void queue_add(struct cmd_handler *h, struct blob_attr *msg, struct blob_attr *data);
-static void handle_button_complete(struct blob_attr *msg, struct blob_attr *data, int ret);
-
-static void button_free(struct button_timeout *b)
-{
-	uloop_timeout_cancel(&b->timeout);
-	list_del(&b->list);
-	free(b->data);
-	free(b->name);
-	free(b);
-}
-
-static void button_timeout_remove(char *button)
-{
-	struct button_timeout *b, *c;
-
-	if (!list_empty(&button_timer)) list_for_each_entry_safe(b, c, &button_timer, list) {
-		if (!strcmp(b->name, button))
-			button_free(b);
-	}
-}
-
-static char *hotplug_msg_find_var(struct blob_attr *msg, const char *name)
-{
-	struct blob_attr *cur;
-	int rem;
-
-	blobmsg_for_each_attr(cur, msg, rem) {
-		if (blobmsg_type(cur) != BLOBMSG_TYPE_STRING)
-			continue;
-
-		if (strcmp(blobmsg_name(cur), name) != 0)
-			continue;
-
-		return blobmsg_data(cur);
-	}
-
-	return NULL;
-}
-
-static void chgrp_error(const char *group, const char *target, const char *failed)
-{
-	ERROR("cannot set group %s for %s (%s: %d)\n",
-	       group, target, failed, errno);
-}
-
-static void chgrp_target(struct blob_attr *bgroup, struct blob_attr *btarget)
-{
-	int ret = 0;
-	struct group *g = NULL;
-	const char *group = blobmsg_get_string(bgroup);
-	const char *target = blobmsg_get_string(btarget);
-
-	errno = 0;
-
-	g = getgrnam(group);
-	if (!g)
-		return chgrp_error(group, target, "getgrnam");
-
-	ret = chown(target, 0, g->gr_gid);
-	if (ret < 0)
-		return chgrp_error(group, target, "chown");
-}
-
-static void handle_makedev(struct blob_attr *msg, struct blob_attr *data)
-{
-	unsigned int oldumask = umask(0);
-	static struct blobmsg_policy mkdev_policy[3] = {
-		{ .type = BLOBMSG_TYPE_STRING },
-		{ .type = BLOBMSG_TYPE_STRING },
-		{ .type = BLOBMSG_TYPE_STRING },
-	};
-	struct blob_attr *tb[3];
-	char *minor = hotplug_msg_find_var(msg, "MINOR");
-	char *major = hotplug_msg_find_var(msg, "MAJOR");
-	char *subsystem = hotplug_msg_find_var(msg, "SUBSYSTEM");
-
-	blobmsg_parse_array(mkdev_policy, 3, tb, blobmsg_data(data), blobmsg_data_len(data));
-	if (tb[0] && tb[1] && minor && major && subsystem) {
-		mode_t m = S_IFCHR;
-		char *d = strdup(blobmsg_get_string(tb[0]));
-
-		d = dirname(d);
-		mkdir_p(d, 0755);
-		free(d);
-
-		if (!strcmp(subsystem, "block"))
-			m = S_IFBLK;
-		mknod(blobmsg_get_string(tb[0]),
-				m | strtoul(blobmsg_data(tb[1]), NULL, 8),
-				makedev(atoi(major), atoi(minor)));
-		if (tb[2])
-			chgrp_target(tb[2], tb[0]);
-	}
-	umask(oldumask);
-}
-
-static void handle_rm(struct blob_attr *msg, struct blob_attr *data)
-{
-	static struct blobmsg_policy rm_policy = {
-		.type = BLOBMSG_TYPE_STRING,
-	};
-	struct blob_attr *tb;
-
-	blobmsg_parse_array(&rm_policy, 1, &tb, blobmsg_data(data), blobmsg_data_len(data));
-	if (tb)
-		unlink(blobmsg_data(tb));
-}
-
-static void handle_exec(struct blob_attr *msg, struct blob_attr *data)
-{
-	char *argv[8];
-	struct blob_attr *cur;
-	int rem, fd;
-	int i = 0;
-
-	blobmsg_for_each_attr(cur, msg, rem)
-		setenv(blobmsg_name(cur), blobmsg_data(cur), 1);
-
-	blobmsg_for_each_attr(cur, data, rem) {
-		argv[i] = blobmsg_data(cur);
-		i++;
-		if (i == 7)
-			break;
-	}
-
-	if (debug < 3) {
-		fd = open("/dev/null", O_RDWR);
-		if (fd > -1) {
-			dup2(fd, STDIN_FILENO);
-			dup2(fd, STDOUT_FILENO);
-			dup2(fd, STDERR_FILENO);
-			if (fd > STDERR_FILENO)
-				close(fd);
-		}
-	}
-
-	if (i > 0) {
-		argv[i] = NULL;
-		execvp(argv[0], &argv[0]);
-	}
-	exit(EXIT_FAILURE);
-}
-
-static void handle_button_start(struct blob_attr *msg, struct blob_attr *data)
-{
-	char *button = hotplug_msg_find_var(msg, "BUTTON");
-
-	if (button)
-		button_timeout_remove(button);
-}
-
-static void handle_firmware(struct blob_attr *msg, struct blob_attr *data)
-{
-	char *dir = blobmsg_get_string(blobmsg_data(data));
-	char *file = hotplug_msg_find_var(msg, "FIRMWARE");
-	char *dev = hotplug_msg_find_var(msg, "DEVPATH");
-	struct stat s = { 0 };
-	char *path, loadpath[256], syspath[256];
-	int fw, src, load, len;
-	static char buf[4096];
-
-	DEBUG(2, "Firmware request for %s/%s\n", dir, file);
-
-	if (!file || !dir || !dev) {
-		ERROR("Request for unknown firmware %s/%s\n", dir, file);
-		exit(EXIT_FAILURE);
-	}
-
-	path = alloca(strlen(dir) + strlen(file) + 2);
-	sprintf(path, "%s/%s", dir, file);
-
-	if (stat(path, &s)) {
-		ERROR("Could not find firmware %s: %m\n", path);
-		src = -1;
-		s.st_size = 0;
-		goto send_to_kernel;
-	}
-
-	src = open(path, O_RDONLY);
-	if (src < 0) {
-		ERROR("Failed to open %s: %m\n", path);
-		s.st_size = 0;
-		goto send_to_kernel;
-	}
-
-send_to_kernel:
-	snprintf(loadpath, sizeof(loadpath), "/sys/%s/loading", dev);
-	load = open(loadpath, O_WRONLY);
-	if (!load) {
-		ERROR("Failed to open %s: %m\n", loadpath);
-		exit(EXIT_FAILURE);
-	}
-	if (write(load, "1", 1) == -1) {
-		ERROR("Failed to write to %s: %m\n", loadpath);
-		exit(EXIT_FAILURE);
-	}
-	close(load);
-
-	snprintf(syspath, sizeof(syspath), "/sys/%s/data", dev);
-	fw = open(syspath, O_WRONLY);
-	if (fw < 0) {
-		ERROR("Failed to open %s: %m\n", syspath);
-		exit(EXIT_FAILURE);
-	}
-
-	len = s.st_size;
-	while (len) {
-		len = read(src, buf, sizeof(buf));
-		if (len <= 0)
-			break;
-
-		if (write(fw, buf, len) == -1) {
-			ERROR("failed to write firmware file %s/%s to %s: %m\n", dir, file, dev);
-			break;
-		}
-	}
-
-	if (src >= 0)
-		close(src);
-	close(fw);
-
-	load = open(loadpath, O_WRONLY);
-	if (write(load, "0", 1) == -1)
-		ERROR("failed to write to %s: %m\n", loadpath);
-	close(load);
-
-	DEBUG(2, "Done loading %s\n", path);
-
-	exit(EXIT_FAILURE);
-}
-
-static void handle_start_console(struct blob_attr *msg, struct blob_attr *data)
-{
-	char *dev = blobmsg_get_string(blobmsg_data(data));
-
-	DEBUG(2, "Start console request for %s\n", dev);
-
-	procd_inittab_run("respawn");
-	procd_inittab_run("askfirst");
-
-	DEBUG(2, "Done starting console for %s\n", dev);
-
-	exit(EXIT_FAILURE);
-}
-
-enum {
-	HANDLER_MKDEV = 0,
-	HANDLER_RM,
-	HANDLER_EXEC,
-	HANDLER_BUTTON,
-	HANDLER_FW,
-	HANDLER_START_CONSOLE,
-};
-
-static struct cmd_handler {
-	char *name;
-	int atomic;
-	void (*handler)(struct blob_attr *msg, struct blob_attr *data);
-	void (*start)(struct blob_attr *msg, struct blob_attr *data);
-	void (*complete)(struct blob_attr *msg, struct blob_attr *data, int ret);
-} handlers[] = {
-	[HANDLER_MKDEV] = {
-		.name = "makedev",
-		.atomic = 1,
-		.handler = handle_makedev,
-	},
-	[HANDLER_RM] = {
-		.name = "rm",
-		.atomic = 1,
-		.handler = handle_rm,
-	},
-	[HANDLER_EXEC] = {
-		.name = "exec",
-		.handler = handle_exec,
-	},
-	[HANDLER_BUTTON] = {
-		.name = "button",
-		.handler = handle_exec,
-		.start = handle_button_start,
-		.complete = handle_button_complete,
-	},
-	[HANDLER_FW] = {
-		.name = "load-firmware",
-		.handler = handle_firmware,
-	},
-	[HANDLER_START_CONSOLE] = {
-		.name = "start-console",
-		.handler = handle_start_console,
-	},
-};
-
-static void queue_next(void)
-{
-	struct cmd_queue *c;
-
-	if (queue_proc.pending || list_empty(&cmd_queue))
-		return;
-
-	c = list_first_entry(&cmd_queue, struct cmd_queue, list);
-
-	queue_proc.pid = fork();
-	if (!queue_proc.pid) {
-		uloop_done();
-		c->handler(c->msg, c->data);
-		exit(0);
-	}
-	if (c->start)
-		c->start(c->msg, c->data);
-	list_del(&c->list);
-	if (c->complete)
-		current = c;
-	else
-		free(c);
-	if (queue_proc.pid <= 0) {
-		queue_next();
-		return;
-	}
-
-	uloop_process_add(&queue_proc);
-
-	DEBUG(4, "Launched hotplug exec instance, pid=%d\n", (int) queue_proc.pid);
-}
-
-static void queue_proc_cb(struct uloop_process *c, int ret)
-{
-	DEBUG(4, "Finished hotplug exec instance, pid=%d\n", (int) c->pid);
-
-	if (current) {
-		current->complete(current->msg, current->data, ret);
-		free(current);
-		current = NULL;
-	}
-	queue_next();
-}
-
-static void queue_add(struct cmd_handler *h, struct blob_attr *msg, struct blob_attr *data)
-{
-	struct cmd_queue *c = NULL;
-	struct blob_attr *_msg, *_data;
-
-	c = calloc_a(sizeof(struct cmd_queue),
-		&_msg, blob_pad_len(msg),
-		&_data, blob_pad_len(data),
-		NULL);
-
-	if (!c)
-		return;
-
-	c->msg = _msg;
-	c->data = _data;
-
-	memcpy(c->msg, msg, blob_pad_len(msg));
-	memcpy(c->data, data, blob_pad_len(data));
-	c->handler = h->handler;
-	c->complete = h->complete;
-	c->start = h->start;
-	list_add_tail(&c->list, &cmd_queue);
-	queue_next();
-}
-
-static void handle_button_timeout(struct uloop_timeout *t)
-{
-	struct button_timeout *b;
-	char seen[16];
-
-	b = container_of(t, struct button_timeout, timeout);
-	blob_buf_init(&button_buf, 0);
-	blobmsg_add_string(&button_buf, "BUTTON", b->name);
-	blobmsg_add_string(&button_buf, "ACTION", "timeout");
-	snprintf(seen, sizeof(seen), "%d", b->seen);
-	blobmsg_add_string(&button_buf, "SEEN", seen);
-	queue_add(&handlers[HANDLER_EXEC], button_buf.head, b->data);
-	button_free(b);
-}
-
-static void handle_button_complete(struct blob_attr *msg, struct blob_attr *data, int ret)
-{
-	char *name = hotplug_msg_find_var(msg, "BUTTON");
-	struct button_timeout *b;
-	int timeout = ret >> 8;
-
-	if (!timeout)
-		return;
-
-	if (!name)
-		return;
-
-	b = calloc(1, sizeof(*b));
-	if (!b)
-		return;
-
-	b->data = malloc(blob_pad_len(data));
-	b->name = strdup(name);
-	b->seen = timeout;
-
-	memcpy(b->data, data, blob_pad_len(data));
-	b->timeout.cb = handle_button_timeout;
-
-	uloop_timeout_set(&b->timeout, timeout * 1000);
-	list_add(&b->list, &button_timer);
-}
-
-static const char* rule_handle_var(struct json_script_ctx *ctx, const char *name, struct blob_attr *vars)
-{
-	const char *str, *sep;
-
-	if (!strcmp(name, "DEVICENAME") || !strcmp(name, "DEVNAME")) {
-		str = json_script_find_var(ctx, vars, "DEVPATH");
-		if (!str)
-			return NULL;
-
-		sep = strrchr(str, '/');
-		if (sep)
-			return sep + 1;
-
-		return str;
-	}
-
-	return NULL;
-}
-
-static struct json_script_file *
-rule_handle_file(struct json_script_ctx *ctx, const char *name)
-{
-	json_object *obj;
-
-	obj = json_object_from_file((char*)name);
-	if (!obj)
-		return NULL;
-
-	blob_buf_init(&script, 0);
-	blobmsg_add_json_element(&script, "", obj);
-
-	return json_script_file_from_blobmsg(name, blob_data(script.head), blob_len(script.head));
-}
-
-static void rule_handle_command(struct json_script_ctx *ctx, const char *name,
-				struct blob_attr *data, struct blob_attr *vars)
-{
-	struct blob_attr *cur;
-	int rem, i;
-
-	if (debug > 3) {
-		DEBUG(4, "Command: %s\n", name);
-		blobmsg_for_each_attr(cur, data, rem)
-			DEBUG(4, " %s\n", (char *) blobmsg_data(cur));
-
-		DEBUG(4, "Message:\n");
-		blobmsg_for_each_attr(cur, vars, rem)
-			DEBUG(4, " %s=%s\n", blobmsg_name(cur), (char *) blobmsg_data(cur));
-	}
-
-	for (i = 0; i < ARRAY_SIZE(handlers); i++)
-		if (!strcmp(handlers[i].name, name)) {
-			if (handlers[i].atomic)
-				handlers[i].handler(vars, data);
-			else
-				queue_add(&handlers[i], vars, data);
-			break;
-		}
-
-	if (last_event.cb)
-		uloop_timeout_set(&last_event, HOTPLUG_WAIT);
-}
-
-static void rule_handle_error(struct json_script_ctx *ctx, const char *msg,
-				struct blob_attr *context)
-{
-	char *s;
-
-	s = blobmsg_format_json(context, false);
-	ERROR("ERROR: %s in block: %s\n", msg, s);
-	free(s);
-}
-
-static struct json_script_ctx jctx = {
-	.handle_var = rule_handle_var,
-	.handle_error = rule_handle_error,
-	.handle_command = rule_handle_command,
-	.handle_file = rule_handle_file,
-};
-
-static void hotplug_handler_debug(struct blob_attr *data)
-{
-	char *str;
-
-	if (debug < 3)
-		return;
-
-	str = blobmsg_format_json(data, true);
-	DEBUG(3, "%s\n", str);
-	free(str);
-}
-
-static void hotplug_handler(struct uloop_fd *u, unsigned int ev)
-{
-	int i = 0;
-	static char buf[4096];
-	int len = recv(u->fd, buf, sizeof(buf) - 1, MSG_DONTWAIT);
-	void *index;
-	if (len < 1)
-		return;
-
-	buf[len] = '\0';
-
-	blob_buf_init(&b, 0);
-	index = blobmsg_open_table(&b, NULL);
-	while (i < len) {
-		int l = strlen(buf + i) + 1;
-		char *e = strstr(&buf[i], "=");
-
-		if (e) {
-			*e = '\0';
-			if ((strcmp(&buf[i], "DEVNAME") == 0) && (strncmp(&e[1], "/dev/", 5) == 0))
-				blobmsg_add_string(&b, &buf[i], &e[6]);
-			else
-				blobmsg_add_string(&b, &buf[i], &e[1]);
-		}
-		i += l;
-	}
-	blobmsg_close_table(&b, index);
-	hotplug_handler_debug(b.head);
-	json_script_run(&jctx, rule_file, blob_data(b.head));
-}
-
-static struct uloop_fd hotplug_fd = {
-	.cb = hotplug_handler,
-};
-
-void hotplug_last_event(uloop_timeout_handler handler)
-{
-	last_event.cb = handler;
-	if (handler)
-		uloop_timeout_set(&last_event, HOTPLUG_WAIT);
-	else
-		uloop_timeout_cancel(&last_event);
-}
-
-void hotplug(char *rules)
-{
-	struct sockaddr_nl nls = {};
-	int nlbufsize = 512 * 1024;
-
-	rule_file = strdup(rules);
-	nls.nl_family = AF_NETLINK;
-	nls.nl_pid = 0;
-	nls.nl_groups = -1;
-
-	if ((hotplug_fd.fd = socket(PF_NETLINK, SOCK_DGRAM | SOCK_CLOEXEC, NETLINK_KOBJECT_UEVENT)) == -1) {
-		ERROR("Failed to open hotplug socket: %m\n");
-		exit(1);
-	}
-	if (bind(hotplug_fd.fd, (void *)&nls, sizeof(struct sockaddr_nl))) {
-		ERROR("Failed to bind hotplug socket: %m\n");
-		exit(1);
-	}
-
-	if (setsockopt(hotplug_fd.fd, SOL_SOCKET, SO_RCVBUFFORCE, &nlbufsize, sizeof(nlbufsize)))
-		ERROR("Failed to resize receive buffer: %m\n");
-
-	json_script_init(&jctx);
-	queue_proc.cb = queue_proc_cb;
-	uloop_fd_add(&hotplug_fd, ULOOP_READ);
-}
-
-int hotplug_run(char *rules)
-{
-	uloop_init();
-	hotplug(rules);
-	uloop_run();
-
-	return 0;
-}
-
-void hotplug_shutdown(void)
-{
-	uloop_fd_delete(&hotplug_fd);
-	close(hotplug_fd.fd);
-}
diff --git a/plug/hotplug.h b/plug/hotplug.h
deleted file mode 100644
index 9e469d1..0000000
--- a/plug/hotplug.h
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Copyright (C) 2013 Felix Fietkau <nbd@openwrt.org>
- * Copyright (C) 2013 John Crispin <blogic@openwrt.org>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 2.1
- * as published by the Free Software Foundation
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef __PROCD_HOTPLUG_H
-#define __PROCD_HOTPLUG_H
-
-#include <libubox/uloop.h>
-
-#ifndef DISABLE_INIT
-void hotplug(char *rules);
-int hotplug_run(char *rules);
-void hotplug_shutdown(void);
-void hotplug_last_event(uloop_timeout_handler handler);
-void procd_coldplug(void);
-#else
-static inline void hotplug(char *rules)
-{
-}
-
-static inline int hotplug_run(char *rules)
-{
-	return 0;
-}
-
-static inline void hotplug_shutdown(void)
-{
-}
-
-static inline void hotplug_last_event(uloop_timeout_handler handler)
-{
-}
-
-static inline void procd_coldplug(void)
-{
-}
-#endif
-
-#endif
diff --git a/procd.c b/procd.c
index 3de6208..e9fef1e 100644
--- a/procd.c
+++ b/procd.c
@@ -23,7 +23,6 @@
 
 #include "procd.h"
 #include "watchdog.h"
-#include "plug/hotplug.h"
 
 unsigned int debug;
 
@@ -32,7 +31,6 @@ static int usage(const char *prog)
 	fprintf(stderr, "Usage: %s [options]\n"
 		"Options:\n"
 		"	-s <path>	Path to ubus socket\n"
-		"	-h <path>	run as hotplug daemon\n"
 		"	-d <level>	Enable debug messages\n"
 		"	-S		Print messages to stdout\n"
 		"\n", prog);
@@ -50,10 +48,8 @@ int main(int argc, char **argv)
 		unsetenv("DBGLVL");
 	}
 
-	while ((ch = getopt(argc, argv, "d:s:h:S")) != -1) {
+	while ((ch = getopt(argc, argv, "d:s:S")) != -1) {
 		switch (ch) {
-		case 'h':
-			return hotplug_run(optarg);
 		case 's':
 			ubus_socket = optarg;
 			break;
diff --git a/state.c b/state.c
index fb81248..41f1400 100644
--- a/state.c
+++ b/state.c
@@ -24,14 +24,12 @@
 #include "container.h"
 #include "procd.h"
 #include "syslog.h"
-#include "plug/hotplug.h"
 #include "watchdog.h"
 #include "service/service.h"
 #include "utils/utils.h"
 
 enum {
 	STATE_NONE = 0,
-	STATE_EARLY,
 	STATE_UBUS,
 	STATE_INIT,
 	STATE_RUNNING,
@@ -129,15 +127,7 @@ static void state_enter(void)
 	struct passwd *p;
 
 	switch (state) {
-	case STATE_EARLY:
-		LOG("- early -\n");
-		watchdog_init(0);
-		hotplug("/etc/hotplug.json");
-		procd_coldplug();
-		break;
-
 	case STATE_UBUS:
-		// try to reopen incase the wdt was not available before coldplug
 		watchdog_init(0);
 		set_stdio("console");
 		p = getpwnam("ubus");
-- 
2.34.1.windows.1

