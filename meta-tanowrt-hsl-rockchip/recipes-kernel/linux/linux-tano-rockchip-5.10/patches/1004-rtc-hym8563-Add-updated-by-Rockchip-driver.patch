From 69c82f83c26b6a9228869ac8c54e449633d9b626 Mon Sep 17 00:00:00 2001
From: Anton Kikin <a.kikin@tano-systems.com>
Date: Sat, 18 Feb 2023 05:10:07 +0300
Subject: [PATCH] rtc-hym8563: Add updated by Rockchip driver

Signed-off-by: Anton Kikin <a.kikin@tano-systems.com>
---
 drivers/rtc/rtc-hym8563.c | 997 ++++++++++++++++++++------------------
 drivers/rtc/rtc-hym8563.h |  57 +++
 2 files changed, 580 insertions(+), 474 deletions(-)
 create mode 100644 drivers/rtc/rtc-hym8563.h

diff --git a/drivers/rtc/rtc-hym8563.c b/drivers/rtc/rtc-hym8563.c
index f1c3fb465269..2fed1aa79776 100644
--- a/drivers/rtc/rtc-hym8563.c
+++ b/drivers/rtc/rtc-hym8563.c
@@ -9,538 +9,538 @@
  * Copyright (C) 2010 ROCKCHIP, Inc.
  */
 
+//#define DEBUG
+#define pr_fmt(fmt) "rtc: %s: " fmt, __func__
+
 #include <linux/module.h>
-#include <linux/clk-provider.h>
 #include <linux/i2c.h>
 #include <linux/bcd.h>
 #include <linux/rtc.h>
 
-#define HYM8563_CTL1		0x00
-#define HYM8563_CTL1_TEST	BIT(7)
-#define HYM8563_CTL1_STOP	BIT(5)
-#define HYM8563_CTL1_TESTC	BIT(3)
-
-#define HYM8563_CTL2		0x01
-#define HYM8563_CTL2_TI_TP	BIT(4)
-#define HYM8563_CTL2_AF		BIT(3)
-#define HYM8563_CTL2_TF		BIT(2)
-#define HYM8563_CTL2_AIE	BIT(1)
-#define HYM8563_CTL2_TIE	BIT(0)
-
-#define HYM8563_SEC		0x02
-#define HYM8563_SEC_VL		BIT(7)
-#define HYM8563_SEC_MASK	0x7f
-
-#define HYM8563_MIN		0x03
-#define HYM8563_MIN_MASK	0x7f
-
-#define HYM8563_HOUR		0x04
-#define HYM8563_HOUR_MASK	0x3f
-
-#define HYM8563_DAY		0x05
-#define HYM8563_DAY_MASK	0x3f
-
-#define HYM8563_WEEKDAY		0x06
-#define HYM8563_WEEKDAY_MASK	0x07
-
-#define HYM8563_MONTH		0x07
-#define HYM8563_MONTH_CENTURY	BIT(7)
-#define HYM8563_MONTH_MASK	0x1f
-
-#define HYM8563_YEAR		0x08
-
-#define HYM8563_ALM_MIN		0x09
-#define HYM8563_ALM_HOUR	0x0a
-#define HYM8563_ALM_DAY		0x0b
-#define HYM8563_ALM_WEEK	0x0c
-
-/* Each alarm check can be disabled by setting this bit in the register */
-#define HYM8563_ALM_BIT_DISABLE	BIT(7)
-
-#define HYM8563_CLKOUT		0x0d
-#define HYM8563_CLKOUT_ENABLE	BIT(7)
-#define HYM8563_CLKOUT_32768	0
-#define HYM8563_CLKOUT_1024	1
-#define HYM8563_CLKOUT_32	2
-#define HYM8563_CLKOUT_1	3
-#define HYM8563_CLKOUT_MASK	3
-
-#define HYM8563_TMR_CTL		0x0e
-#define HYM8563_TMR_CTL_ENABLE	BIT(7)
-#define HYM8563_TMR_CTL_4096	0
-#define HYM8563_TMR_CTL_64	1
-#define HYM8563_TMR_CTL_1	2
-#define HYM8563_TMR_CTL_1_60	3
-#define HYM8563_TMR_CTL_MASK	3
-
-#define HYM8563_TMR_CNT		0x0f
+#include <linux/delay.h>
+#include <linux/wakelock.h>
+#include <linux/slab.h>
+#include "rtc-hym8563.h"
+#include <linux/of_gpio.h>
+#include <linux/irqdomain.h>
+#define RTC_SPEED 	200 * 1000
 
 struct hym8563 {
-	struct i2c_client	*client;
-	struct rtc_device	*rtc;
-#ifdef CONFIG_COMMON_CLK
-	struct clk_hw		clkout_hw;
-#endif
+	int irq;
+	struct i2c_client *client;
+	struct mutex mutex;
+	struct rtc_device *rtc;
+	struct rtc_wkalrm alarm;
+	struct wake_lock wake_lock;
 };
 
-/*
- * RTC handling
- */
+static struct i2c_client *gClient = NULL;
 
-static int hym8563_rtc_read_time(struct device *dev, struct rtc_time *tm)
+static int i2c_master_reg8_send(const struct i2c_client *client,
+	const char reg, const char *buf, int count, int scl_rate)
 {
-	struct i2c_client *client = to_i2c_client(dev);
-	u8 buf[7];
+	struct i2c_adapter *adap = client->adapter;
+	struct i2c_msg msg;
 	int ret;
 
-	ret = i2c_smbus_read_i2c_block_data(client, HYM8563_SEC, 7, buf);
-	if (ret < 0)
-		return ret;
+	char *tx_buf = (char *)kzalloc(count + 1, GFP_KERNEL);
+	if (!tx_buf)
+		return -ENOMEM;
 
-	tm->tm_sec = bcd2bin(buf[0] & HYM8563_SEC_MASK);
-	tm->tm_min = bcd2bin(buf[1] & HYM8563_MIN_MASK);
-	tm->tm_hour = bcd2bin(buf[2] & HYM8563_HOUR_MASK);
-	tm->tm_mday = bcd2bin(buf[3] & HYM8563_DAY_MASK);
-	tm->tm_wday = bcd2bin(buf[4] & HYM8563_WEEKDAY_MASK); /* 0 = Sun */
-	tm->tm_mon = bcd2bin(buf[5] & HYM8563_MONTH_MASK) - 1; /* 0 = Jan */
-	tm->tm_year = bcd2bin(buf[6]) + 100;
+	tx_buf[0] = reg;
+	memcpy(tx_buf+1, buf, count);
 
-	return 0;
+	msg.addr  = client->addr;
+	msg.flags = client->flags;
+	msg.len   = count + 1;
+	msg.buf   = (char *)tx_buf;
+//	msg.scl_rate = scl_rate;
+
+	ret = i2c_transfer(adap, &msg, 1);
+	kfree(tx_buf);
+	return (ret == 1) ? count : ret;
 }
 
-static int hym8563_rtc_set_time(struct device *dev, struct rtc_time *tm)
+static int i2c_master_reg8_recv(const struct i2c_client *client,
+	const char reg, char *buf, int count, int scl_rate)
 {
-	struct i2c_client *client = to_i2c_client(dev);
-	u8 buf[7];
+	struct i2c_adapter *adap = client->adapter;
+	struct i2c_msg msgs[2];
 	int ret;
 
-	/* Years >= 2100 are to far in the future, 19XX is to early */
-	if (tm->tm_year < 100 || tm->tm_year >= 200)
-		return -EINVAL;
-
-	buf[0] = bin2bcd(tm->tm_sec);
-	buf[1] = bin2bcd(tm->tm_min);
-	buf[2] = bin2bcd(tm->tm_hour);
-	buf[3] = bin2bcd(tm->tm_mday);
-	buf[4] = bin2bcd(tm->tm_wday);
-	buf[5] = bin2bcd(tm->tm_mon + 1);
-
-	/*
-	 * While the HYM8563 has a century flag in the month register,
-	 * it does not seem to carry it over a subsequent write/read.
-	 * So we'll limit ourself to 100 years, starting at 2000 for now.
-	 */
-	buf[6] = bin2bcd(tm->tm_year - 100);
-
-	/*
-	 * CTL1 only contains TEST-mode bits apart from stop,
-	 * so no need to read the value first
-	 */
-	ret = i2c_smbus_write_byte_data(client, HYM8563_CTL1,
-						HYM8563_CTL1_STOP);
-	if (ret < 0)
-		return ret;
-
-	ret = i2c_smbus_write_i2c_block_data(client, HYM8563_SEC, 7, buf);
-	if (ret < 0)
-		return ret;
-
-	ret = i2c_smbus_write_byte_data(client, HYM8563_CTL1, 0);
-	if (ret < 0)
-		return ret;
+	char reg_buf = reg;
+	
+	msgs[0].addr  = client->addr;
+	msgs[0].flags = client->flags;
+	msgs[0].len   = 1;
+	msgs[0].buf   = &reg_buf;
+//	msgs[0].scl_rate = scl_rate;
 
-	return 0;
-}
+	msgs[1].addr  = client->addr;
+	msgs[1].flags = client->flags | I2C_M_RD;
+	msgs[1].len   = count;
+	msgs[1].buf   = (char *)buf;
+//	msgs[1].scl_rate = scl_rate;
 
-static int hym8563_rtc_alarm_irq_enable(struct device *dev,
-					unsigned int enabled)
-{
-	struct i2c_client *client = to_i2c_client(dev);
-	int data;
+	ret = i2c_transfer(adap, msgs, 2);
 
-	data = i2c_smbus_read_byte_data(client, HYM8563_CTL2);
-	if (data < 0)
-		return data;
-
-	if (enabled)
-		data |= HYM8563_CTL2_AIE;
-	else
-		data &= ~HYM8563_CTL2_AIE;
-
-	return i2c_smbus_write_byte_data(client, HYM8563_CTL2, data);
-};
+	return (ret == 2) ? count : ret;
+}
 
-static int hym8563_rtc_read_alarm(struct device *dev, struct rtc_wkalrm *alm)
+static int hym8563_i2c_read_regs(struct i2c_client *client,
+	u8 reg, u8 buf[], unsigned len)
 {
-	struct i2c_client *client = to_i2c_client(dev);
-	struct rtc_time *alm_tm = &alm->time;
-	u8 buf[4];
 	int ret;
-
-	ret = i2c_smbus_read_i2c_block_data(client, HYM8563_ALM_MIN, 4, buf);
-	if (ret < 0)
-		return ret;
-
-	/* The alarm only has a minute accuracy */
-	alm_tm->tm_sec = 0;
-
-	alm_tm->tm_min = (buf[0] & HYM8563_ALM_BIT_DISABLE) ?
-					-1 :
-					bcd2bin(buf[0] & HYM8563_MIN_MASK);
-	alm_tm->tm_hour = (buf[1] & HYM8563_ALM_BIT_DISABLE) ?
-					-1 :
-					bcd2bin(buf[1] & HYM8563_HOUR_MASK);
-	alm_tm->tm_mday = (buf[2] & HYM8563_ALM_BIT_DISABLE) ?
-					-1 :
-					bcd2bin(buf[2] & HYM8563_DAY_MASK);
-	alm_tm->tm_wday = (buf[3] & HYM8563_ALM_BIT_DISABLE) ?
-					-1 :
-					bcd2bin(buf[3] & HYM8563_WEEKDAY_MASK);
-
-	ret = i2c_smbus_read_byte_data(client, HYM8563_CTL2);
-	if (ret < 0)
-		return ret;
-
-	if (ret & HYM8563_CTL2_AIE)
-		alm->enabled = 1;
-
-	return 0;
+	ret = i2c_master_reg8_recv(client, reg, buf, len, RTC_SPEED);
+	return ret;
 }
 
-static int hym8563_rtc_set_alarm(struct device *dev, struct rtc_wkalrm *alm)
+static int hym8563_i2c_set_regs(struct i2c_client *client,
+	u8 reg, u8 const buf[], __u16 len)
 {
-	struct i2c_client *client = to_i2c_client(dev);
-	struct rtc_time *alm_tm = &alm->time;
-	u8 buf[4];
 	int ret;
-
-	/*
-	 * The alarm has no seconds so deal with it
-	 */
-	if (alm_tm->tm_sec) {
-		alm_tm->tm_sec = 0;
-		alm_tm->tm_min++;
-		if (alm_tm->tm_min >= 60) {
-			alm_tm->tm_min = 0;
-			alm_tm->tm_hour++;
-			if (alm_tm->tm_hour >= 24) {
-				alm_tm->tm_hour = 0;
-				alm_tm->tm_mday++;
-				alm_tm->tm_wday++;
-				if (alm_tm->tm_wday > 6)
-					alm_tm->tm_wday = 0;
-				switch (alm_tm->tm_mon + 1) {
-				case 1:
-				case 3:
-				case 5:
-				case 7:
-				case 8:
-				case 10:
-				case 12:
-					if (alm_tm->tm_mday > 31)
-						alm_tm->tm_mday = 1;
-					break;
-				case 4:
-				case 6:
-				case 9:
-				case 11:
-					if (alm_tm->tm_mday > 30)
-						alm_tm->tm_mday = 1;
-					break;
-				case 2:
-					if (alm_tm->tm_year / 4 == 0) {
-						if (alm_tm->tm_mday > 29)
-							alm_tm->tm_mday = 1;
-					} else if (alm_tm->tm_mday > 28) {
-						alm_tm->tm_mday = 1;
-					}
-					break;
-				}
-			}
-		}
-	}
-	ret = i2c_smbus_read_byte_data(client, HYM8563_CTL2);
-	if (ret < 0)
-		return ret;
-
-	ret &= ~HYM8563_CTL2_AIE;
-
-	ret = i2c_smbus_write_byte_data(client, HYM8563_CTL2, ret);
-	if (ret < 0)
-		return ret;
-
-	buf[0] = (alm_tm->tm_min < 60 && alm_tm->tm_min >= 0) ?
-			bin2bcd(alm_tm->tm_min) : HYM8563_ALM_BIT_DISABLE;
-
-	buf[1] = (alm_tm->tm_hour < 24 && alm_tm->tm_hour >= 0) ?
-			bin2bcd(alm_tm->tm_hour) : HYM8563_ALM_BIT_DISABLE;
-
-	buf[2] = (alm_tm->tm_mday <= 31 && alm_tm->tm_mday >= 1) ?
-			bin2bcd(alm_tm->tm_mday) : HYM8563_ALM_BIT_DISABLE;
-
-	buf[3] = (alm_tm->tm_wday < 7 && alm_tm->tm_wday >= 0) ?
-			bin2bcd(alm_tm->tm_wday) : HYM8563_ALM_BIT_DISABLE;
-
-	ret = i2c_smbus_write_i2c_block_data(client, HYM8563_ALM_MIN, 4, buf);
-	if (ret < 0)
-		return ret;
-
-	return hym8563_rtc_alarm_irq_enable(dev, alm->enabled);
+	ret = i2c_master_reg8_send(client, reg, buf, (int)len, RTC_SPEED);
+	return ret;
 }
 
-static const struct rtc_class_ops hym8563_rtc_ops = {
-	.read_time		= hym8563_rtc_read_time,
-	.set_time		= hym8563_rtc_set_time,
-	.alarm_irq_enable	= hym8563_rtc_alarm_irq_enable,
-	.read_alarm		= hym8563_rtc_read_alarm,
-	.set_alarm		= hym8563_rtc_set_alarm,
-};
-
-/*
- * Handling of the clkout
- */
-
-#ifdef CONFIG_COMMON_CLK
-#define clkout_hw_to_hym8563(_hw) container_of(_hw, struct hym8563, clkout_hw)
+int hym8563_enable_count(struct i2c_client *client, int en)
+{
+	struct hym8563 *hym8563 = i2c_get_clientdata(client);	
+	u8 regs[2];
 
-static int clkout_rates[] = {
-	32768,
-	1024,
-	32,
-	1,
-};
+	if (!hym8563)
+		return -1;
+
+	if (en) {
+		hym8563_i2c_read_regs(client, RTC_CTL2, regs, 1);
+		regs[0] |= TIE;
+		hym8563_i2c_set_regs(client, RTC_CTL2, regs, 1);
+		regs[0] = 0;
+		regs[0] |= (TE | TD1);
+		hym8563_i2c_set_regs(client, RTC_T_CTL, regs, 1);
+	}
+	else {
+		hym8563_i2c_read_regs(client, RTC_CTL2, regs, 1);
+		regs[0] &= ~TIE;
+		hym8563_i2c_set_regs(client, RTC_CTL2, regs, 1);
+		regs[0] = 0;
+		regs[0] |= (TD0 | TD1);
+		hym8563_i2c_set_regs(client, RTC_T_CTL, regs, 1);
+	}
+	return 0;
+}
 
-static unsigned long hym8563_clkout_recalc_rate(struct clk_hw *hw,
-						unsigned long parent_rate)
+// 0 < sec <=255
+int hym8563_set_count(struct i2c_client *client, int sec)
 {
-	struct hym8563 *hym8563 = clkout_hw_to_hym8563(hw);
-	struct i2c_client *client = hym8563->client;
-	int ret = i2c_smbus_read_byte_data(client, HYM8563_CLKOUT);
+	struct hym8563 *hym8563 = i2c_get_clientdata(client);
+	u8 regs[2];
 
-	if (ret < 0)
-		return 0;
+	if (!hym8563)
+		return -1;
+		
+	if (sec >= 255)
+		regs[0] = 255;
+	else if (sec <= 1)
+		regs[0] = 1;
+	else
+		regs[0] = sec;
+	
+	hym8563_i2c_set_regs(client, RTC_T_COUNT, regs, 1);
+	
+	return 0;
+}
 
-	ret &= HYM8563_CLKOUT_MASK;
-	return clkout_rates[ret];
+/* the init of the hym8563 at first time */
+static int hym8563_init_device(struct i2c_client *client)
+{
+	struct hym8563 *hym8563 = i2c_get_clientdata(client);
+	u8 regs[2];
+	int sr;
+
+	mutex_lock(&hym8563->mutex);
+	regs[0] = 0;
+	sr = hym8563_i2c_set_regs(client, RTC_CTL1, regs, 1);
+	if (sr < 0)
+		goto exit;
+	
+	//disable clkout
+	regs[0] = 0x80;
+	sr = hym8563_i2c_set_regs(client, RTC_CLKOUT, regs, 1);
+	if (sr < 0)
+		goto exit;
+
+	/*enable alarm && count interrupt*/
+	sr = hym8563_i2c_read_regs(client, RTC_CTL2, regs, 1);
+	if (sr < 0)
+		goto exit;
+	regs[0] = 0x0;
+	regs[0] |= (AIE | TIE);
+	sr = hym8563_i2c_set_regs(client, RTC_CTL2, regs, 1);
+	if (sr < 0)
+		goto exit;
+	sr = hym8563_i2c_read_regs(client, RTC_CTL2, regs, 1);
+	if (sr < 0)
+		goto exit;
+
+	sr = hym8563_i2c_read_regs(client, RTC_CTL2, regs, 1);
+	if (sr < 0) {
+		pr_err("read CTL2 err\n");
+		goto exit;
+	}
+	
+	if (regs[0] & (AF|TF)) {
+		regs[0] &= ~(AF|TF);
+		sr = hym8563_i2c_set_regs(client, RTC_CTL2, regs, 1);
+	}
+	
+exit:
+	mutex_unlock(&hym8563->mutex);
+	
+	return sr;
 }
 
-static long hym8563_clkout_round_rate(struct clk_hw *hw, unsigned long rate,
-				      unsigned long *prate)
+static int hym8563_read_datetime(struct i2c_client *client, struct rtc_time *tm)
 {
-	int i;
+	struct hym8563 *hym8563 = i2c_get_clientdata(client);
+	u8 regs[HYM8563_RTC_SECTION_LEN] = { 0, };
+	mutex_lock(&hym8563->mutex);
+	hym8563_i2c_read_regs(client, RTC_SEC, regs, HYM8563_RTC_SECTION_LEN);
+
+	mutex_unlock(&hym8563->mutex);
+	
+	tm->tm_sec  = bcd2bin(regs[0x00] & 0x7F);
+	tm->tm_min  = bcd2bin(regs[0x01] & 0x7F);
+	tm->tm_hour = bcd2bin(regs[0x02] & 0x3F);
+	tm->tm_mday = bcd2bin(regs[0x03] & 0x3F);
+	tm->tm_wday = bcd2bin(regs[0x04] & 0x07);
+	
+	tm->tm_mon  = bcd2bin(regs[0x05] & 0x1F);
+	tm->tm_mon -= 1; // in order to cooperate the systerm time
+	
+	tm->tm_year = bcd2bin(regs[0x06] & 0xFF);
+	if (regs[5] & 0x80)
+		tm->tm_year += 1900;
+	else
+		tm->tm_year += 2000;
+		
+	tm->tm_year -= 1900; // in order to cooperate the systerm time	
+	if (tm->tm_year < 0)
+		tm->tm_year = 0;
+	tm->tm_isdst = 0;
 
-	for (i = 0; i < ARRAY_SIZE(clkout_rates); i++)
-		if (clkout_rates[i] <= rate)
-			return clkout_rates[i];
+	pr_debug("%4d-%02d-%02d(%d) %02d:%02d:%02d\n",
+		1900 + tm->tm_year, tm->tm_mon + 1, tm->tm_mday, tm->tm_wday,
+		tm->tm_hour, tm->tm_min, tm->tm_sec);
 
 	return 0;
 }
 
-static int hym8563_clkout_set_rate(struct clk_hw *hw, unsigned long rate,
-				   unsigned long parent_rate)
+static int hym8563_rtc_read_time(struct device *dev, struct rtc_time *tm)
 {
-	struct hym8563 *hym8563 = clkout_hw_to_hym8563(hw);
-	struct i2c_client *client = hym8563->client;
-	int ret = i2c_smbus_read_byte_data(client, HYM8563_CLKOUT);
-	int i;
-
-	if (ret < 0)
-		return ret;
-
-	for (i = 0; i < ARRAY_SIZE(clkout_rates); i++)
-		if (clkout_rates[i] == rate) {
-			ret &= ~HYM8563_CLKOUT_MASK;
-			ret |= i;
-			return i2c_smbus_write_byte_data(client,
-							 HYM8563_CLKOUT, ret);
-		}
-
-	return -EINVAL;
+	return hym8563_read_datetime(to_i2c_client(dev), tm);
 }
 
-static int hym8563_clkout_control(struct clk_hw *hw, bool enable)
+static int hym8563_set_time(struct i2c_client *client, struct rtc_time *tm)	
 {
-	struct hym8563 *hym8563 = clkout_hw_to_hym8563(hw);
-	struct i2c_client *client = hym8563->client;
-	int ret = i2c_smbus_read_byte_data(client, HYM8563_CLKOUT);
-
-	if (ret < 0)
-		return ret;
+	struct hym8563 *hym8563 = i2c_get_clientdata(client);
+	u8 regs[HYM8563_RTC_SECTION_LEN] = { 0, };
+	u8 mon_day;
+
+	pr_debug("%4d-%02d-%02d(%d) %02d:%02d:%02d\n",
+		1900 + tm->tm_year, tm->tm_mon + 1, tm->tm_mday, tm->tm_wday,
+		tm->tm_hour, tm->tm_min, tm->tm_sec);
+
+	mon_day = rtc_month_days((tm->tm_mon), tm->tm_year + 1900);
+	
+	if (tm->tm_sec >= 60 || tm->tm_sec < 0) //set  sec
+		regs[0x00] = bin2bcd(0x00);
+	else
+		regs[0x00] = bin2bcd(tm->tm_sec);
+	
+	if (tm->tm_min >= 60 || tm->tm_min < 0) //set  min
+		regs[0x01] = bin2bcd(0x00);
+	else
+		regs[0x01] = bin2bcd(tm->tm_min);
 
-	if (enable)
-		ret |= HYM8563_CLKOUT_ENABLE;
+	if (tm->tm_hour >= 24 || tm->tm_hour < 0) //set  hour
+		regs[0x02] = bin2bcd(0x00);
 	else
-		ret &= ~HYM8563_CLKOUT_ENABLE;
+		regs[0x02] = bin2bcd(tm->tm_hour);
+	
+	if ((tm->tm_mday) > mon_day) // if the input month day is bigger than the biggest day of this month, set the biggest day 
+		regs[0x03] = bin2bcd(mon_day);
+	else if ((tm->tm_mday) > 0)
+		regs[0x03] = bin2bcd(tm->tm_mday);
+	else if ((tm->tm_mday) <= 0)
+		regs[0x03] = bin2bcd(0x01);
+
+	if (tm->tm_year >= 200) // year >= 2100
+		regs[0x06] = bin2bcd(99); // year = 2099
+	else if (tm->tm_year >= 100) // 2000 <= year < 2100
+		regs[0x06] = bin2bcd(tm->tm_year - 100);
+	else if (tm->tm_year >= 0) { // 1900 <= year < 2000
+		regs[0x06] = bin2bcd(tm->tm_year);	
+		regs[0x05] |= 0x80;
+	}
+	else { // year < 1900
+		regs[0x06] = bin2bcd(0); //year = 1900
+		regs[0x05] |= 0x80;	
+	}
+
+	regs[0x04] = bin2bcd(tm->tm_wday); // set the weekday
+	regs[0x05] = (regs[0x05] & 0x80) | (bin2bcd(tm->tm_mon + 1) & 0x7F); // set the month
+	
+	mutex_lock(&hym8563->mutex);
+	hym8563_i2c_set_regs(client, RTC_SEC, regs, HYM8563_RTC_SECTION_LEN);
+
+	mutex_unlock(&hym8563->mutex);
 
-	return i2c_smbus_write_byte_data(client, HYM8563_CLKOUT, ret);
+	return 0;
 }
 
-static int hym8563_clkout_prepare(struct clk_hw *hw)
+static int hym8563_rtc_set_time(struct device *dev, struct rtc_time *tm)
 {
-	return hym8563_clkout_control(hw, 1);
+	return hym8563_set_time(to_i2c_client(dev), tm);
 }
 
-static void hym8563_clkout_unprepare(struct clk_hw *hw)
+static int hym8563_rtc_read_alarm(struct device *dev, struct rtc_wkalrm *tm)
 {
-	hym8563_clkout_control(hw, 0);
+	struct i2c_client *client = to_i2c_client(dev);
+	struct hym8563 *hym8563 = i2c_get_clientdata(client);
+	u8 regs[4] = { 0, };
+
+	pr_debug("enter\n");
+	mutex_lock(&hym8563->mutex);
+	hym8563_i2c_read_regs(client, RTC_A_MIN, regs, 4);
+	regs[0] = 0x0;
+	regs[0] |= TIE;
+	hym8563_i2c_set_regs(client, RTC_CTL2, regs, 1);
+	mutex_unlock(&hym8563->mutex);
+	return 0;
 }
 
-static int hym8563_clkout_is_prepared(struct clk_hw *hw)
+static int hym8563_rtc_set_alarm(struct device *dev, struct rtc_wkalrm *alarm)
 {
-	struct hym8563 *hym8563 = clkout_hw_to_hym8563(hw);
-	struct i2c_client *client = hym8563->client;
-	int ret = i2c_smbus_read_byte_data(client, HYM8563_CLKOUT);
+	struct i2c_client *client = to_i2c_client(dev);
+	struct hym8563 *hym8563 = i2c_get_clientdata(client);
+	struct rtc_time now, *tm = &alarm->time;
+	u8 regs[4] = { 0, };
+	u8 mon_day;
+	unsigned long	alarm_sec, now_sec;
+	int diff_sec = 0;
 
-	if (ret < 0)
-		return ret;
+	pr_debug("%4d-%02d-%02d(%d) %02d:%02d:%02d enabled %d\n",
+		1900 + tm->tm_year, tm->tm_mon + 1, tm->tm_mday, tm->tm_wday,
+		tm->tm_hour, tm->tm_min, tm->tm_sec, alarm->enabled);
 
-	return !!(ret & HYM8563_CLKOUT_ENABLE);
-}
+	hym8563_read_datetime(client, &now);
 
-static const struct clk_ops hym8563_clkout_ops = {
-	.prepare = hym8563_clkout_prepare,
-	.unprepare = hym8563_clkout_unprepare,
-	.is_prepared = hym8563_clkout_is_prepared,
-	.recalc_rate = hym8563_clkout_recalc_rate,
-	.round_rate = hym8563_clkout_round_rate,
-	.set_rate = hym8563_clkout_set_rate,
-};
+	mutex_lock(&hym8563->mutex);
+	alarm_sec = rtc_tm_to_time64(tm);
+	now_sec = rtc_tm_to_time64(&now);
 
-static struct clk *hym8563_clkout_register_clk(struct hym8563 *hym8563)
-{
-	struct i2c_client *client = hym8563->client;
-	struct device_node *node = client->dev.of_node;
-	struct clk *clk;
-	struct clk_init_data init;
+	diff_sec = alarm_sec - now_sec;
+
+	if ((diff_sec > 0) && (diff_sec < 256)) {
+		printk("%s:diff_sec= %ds , use time\n",__func__, diff_sec);	
+
+		if (alarm->enabled == 1) {
+			hym8563_set_count(client, diff_sec);
+			hym8563_enable_count(client, 1);
+		}
+		else {
+			hym8563_enable_count(client, 0);
+		}
+	}
+	else {
+		printk("%s:diff_sec= %ds , use alarm\n",__func__, diff_sec);
+		hym8563_enable_count(client, 0);
 
-	init.name = "hym8563-clkout";
-	init.ops = &hym8563_clkout_ops;
-	init.flags = CLK_IS_CRITICAL;
-	init.parent_names = NULL;
-	init.num_parents = 0;
-	hym8563->clkout_hw.init = &init;
+		if (tm->tm_sec > 0) {
+			alarm_sec = rtc_tm_to_time64(tm);
+			rtc_time64_to_tm(alarm_sec, tm);
+		}
 
-	/* optional override of the clockname */
-	of_property_read_string(node, "clock-output-names", &init.name);
+		hym8563->alarm = *alarm;
 
-	/* register the clock */
-	clk = clk_register(&client->dev, &hym8563->clkout_hw);
+		regs[0] = 0x0;
+		hym8563_i2c_set_regs(client, RTC_CTL2, regs, 1);
+		mon_day = rtc_month_days(tm->tm_mon, tm->tm_year + 1900);
+		hym8563_i2c_read_regs(client, RTC_A_MIN, regs, 4);
 
-	if (!IS_ERR(clk))
-		of_clk_add_provider(node, of_clk_src_simple_get, clk);
+		if (tm->tm_min >= 60 || tm->tm_min < 0) //set min
+			regs[0x00] = bin2bcd(0x00) & 0x7f;
+		else
+			regs[0x00] = bin2bcd(tm->tm_min) & 0x7f;
 
-	return clk;
-}
-#endif
+		if (tm->tm_hour >= 24 || tm->tm_hour < 0) //set hour
+			regs[0x01] = bin2bcd(0x00) & 0x7f;
+		else
+			regs[0x01] = bin2bcd(tm->tm_hour) & 0x7f;
 
-/*
- * The alarm interrupt is implemented as a level-low interrupt in the
- * hym8563, while the timer interrupt uses a falling edge.
- * We don't use the timer at all, so the interrupt is requested to
- * use the level-low trigger.
- */
-static irqreturn_t hym8563_irq(int irq, void *dev_id)
-{
-	struct hym8563 *hym8563 = (struct hym8563 *)dev_id;
-	struct i2c_client *client = hym8563->client;
-	struct mutex *lock = &hym8563->rtc->ops_lock;
-	int data, ret;
+		regs[0x03] = bin2bcd (tm->tm_wday) & 0x7f;
 
-	mutex_lock(lock);
+		// if the input month day is bigger than the biggest
+		// day of this month, set the biggest day
+		if (tm->tm_mday > mon_day)
+			regs[0x02] = bin2bcd(mon_day) & 0x7f;
+		else if (tm->tm_mday > 0)
+			regs[0x02] = bin2bcd(tm->tm_mday) & 0x7f;
+		else if (tm->tm_mday <= 0)
+			regs[0x02] = bin2bcd(0x01) & 0x7f;
 
-	/* Clear the alarm flag */
+		hym8563_i2c_set_regs(client, RTC_A_MIN, regs, 4);	
+		hym8563_i2c_read_regs(client, RTC_A_MIN, regs, 4);	
+		hym8563_i2c_read_regs(client, RTC_CTL2, regs, 1);
 
-	data = i2c_smbus_read_byte_data(client, HYM8563_CTL2);
-	if (data < 0) {
-		dev_err(&client->dev, "%s: error reading i2c data %d\n",
-			__func__, data);
-		goto out;
-	}
+		if (alarm->enabled == 1)
+			regs[0] |= AIE;
+		else
+			regs[0] &= 0x0;
 
-	data &= ~HYM8563_CTL2_AF;
+		hym8563_i2c_set_regs(client, RTC_CTL2, regs, 1);
+		hym8563_i2c_read_regs(client, RTC_CTL2, regs, 1);
 
-	ret = i2c_smbus_write_byte_data(client, HYM8563_CTL2, data);
-	if (ret < 0) {
-		dev_err(&client->dev, "%s: error writing i2c data %d\n",
-			__func__, ret);
+		if (diff_sec <= 0) {
+			pr_info("alarm sec <= now sec\n");
+		}
 	}
 
-out:
-	mutex_unlock(lock);
-	return IRQ_HANDLED;
+	mutex_unlock(&hym8563->mutex);
+
+	return 0;
 }
 
-static int hym8563_init_device(struct i2c_client *client)
+#ifdef CONFIG_HDMI_SAVE_DATA
+int hdmi_get_data(void)
 {
-	int ret;
-
-	/* Clear stop flag if present */
-	ret = i2c_smbus_write_byte_data(client, HYM8563_CTL1, 0);
-	if (ret < 0)
-		return ret;
+	u8 regs=0;
+	if (gClient) {
+		hym8563_i2c_read_regs(gClient, RTC_T_COUNT, &regs, 1);
+	}
+	else {
+		printk("%s rtc has no init\n", __func__);
+		return -1;
+	}
 
-	ret = i2c_smbus_read_byte_data(client, HYM8563_CTL2);
-	if (ret < 0)
-		return ret;
+	if (regs == 0 || regs == 0xff) {
+		printk("%s rtc has no hdmi data\n", __func__);
+		return -1;
+	}
 
-	/* Disable alarm and timer interrupts */
-	ret &= ~HYM8563_CTL2_AIE;
-	ret &= ~HYM8563_CTL2_TIE;
+	return (regs-1);
+}
 
-	/* Clear any pending alarm and timer flags */
-	if (ret & HYM8563_CTL2_AF)
-		ret &= ~HYM8563_CTL2_AF;
+int hdmi_set_data(int data)
+{
+	u8 regs = (data+1)&0xff;
+	if (gClient) {
+		hym8563_i2c_set_regs(gClient, RTC_T_COUNT, &regs, 1);
+	}
+	else {
+		printk("%s rtc has no init\n", __func__);
+		return -1;
+	}
+	return 0;
+}
 
-	if (ret & HYM8563_CTL2_TF)
-		ret &= ~HYM8563_CTL2_TF;
+EXPORT_SYMBOL(hdmi_get_data);
+EXPORT_SYMBOL(hdmi_set_data);
+#endif
 
-	ret &= ~HYM8563_CTL2_TI_TP;
+#if defined(CONFIG_RTC_INTF_DEV) || defined(CONFIG_RTC_INTF_DEV_MODULE)
+static int hym8563_i2c_open_alarm(struct i2c_client *client)
+{
+	u8 data;	
+	hym8563_i2c_read_regs(client, RTC_CTL2, &data, 1);
+	data |= AIE;
+	hym8563_i2c_set_regs(client, RTC_CTL2, &data, 1);
 
-	return i2c_smbus_write_byte_data(client, HYM8563_CTL2, ret);
+	return 0;
 }
 
-#ifdef CONFIG_PM_SLEEP
-static int hym8563_suspend(struct device *dev)
+static int hym8563_i2c_close_alarm(struct i2c_client *client)
 {
-	struct i2c_client *client = to_i2c_client(dev);
-	int ret;
-
-	if (device_may_wakeup(dev)) {
-		ret = enable_irq_wake(client->irq);
-		if (ret) {
-			dev_err(dev, "enable_irq_wake failed, %d\n", ret);
-			return ret;
-		}
-	}
+	u8 data;
+	hym8563_i2c_read_regs(client, RTC_CTL2, &data, 1);
+	data &= ~AIE;
+	hym8563_i2c_set_regs(client, RTC_CTL2, &data, 1);
 
 	return 0;
 }
 
-static int hym8563_resume(struct device *dev)
+static int hym8563_rtc_ioctl(struct device *dev,
+	unsigned int cmd, unsigned long arg)
 {
 	struct i2c_client *client = to_i2c_client(dev);
 
-	if (device_may_wakeup(dev))
-		disable_irq_wake(client->irq);
+	switch (cmd) {
+	case RTC_AIE_OFF:
+		if(hym8563_i2c_close_alarm(client) < 0)
+			goto err;
+		break;
+	case RTC_AIE_ON:
+		if(hym8563_i2c_open_alarm(client))
+			goto err;
+		break;
+	default:
+		return -ENOIOCTLCMD;
+	}	
+	return 0;
+err:
+	return -EIO;
+}
+#else
+#define hym8563_rtc_ioctl NULL
+#endif
 
+#if defined(CONFIG_RTC_INTF_PROC) || defined(CONFIG_RTC_INTF_PROC_MODULE)
+static int hym8563_rtc_proc(struct device *dev, struct seq_file *seq)
+{
 	return 0;
 }
+#else
+#define hym8563_rtc_proc NULL
 #endif
 
-static SIMPLE_DEV_PM_OPS(hym8563_pm_ops, hym8563_suspend, hym8563_resume);
+static irqreturn_t hym8563_wakeup_irq(int irq, void *data)
+{
+	struct hym8563 *hym8563 = data;
+	struct i2c_client *client = hym8563->client;
+	u8 value;
+
+	mutex_lock(&hym8563->mutex);
+	hym8563_i2c_read_regs(client, RTC_CTL2, &value, 1);
+	value &= ~(AF|TF);
+	hym8563_i2c_set_regs(client, RTC_CTL2, &value, 1);
+	mutex_unlock(&hym8563->mutex);
+
+	rtc_update_irq(hym8563->rtc, 1, RTC_IRQF | RTC_AF | RTC_UF);
+
+	//printk("%s:irq=%d\n",__func__,irq);
+	return IRQ_HANDLED;
+}
+
+static const struct rtc_class_ops hym8563_rtc_ops = {
+	.read_time	= hym8563_rtc_read_time,
+	.set_time	= hym8563_rtc_set_time,
+	.read_alarm	= hym8563_rtc_read_alarm,
+	.set_alarm	= hym8563_rtc_set_alarm,
+	.ioctl 		= hym8563_rtc_ioctl,
+	.proc		= hym8563_rtc_proc
+};
 
 static int hym8563_probe(struct i2c_client *client,
 			 const struct i2c_device_id *id)
 {
+	int rc = 0;
+	u8 reg = 0;
 	struct hym8563 *hym8563;
-	int ret;
-	/*
-	 * hym8563 initial time(2021_1_1_12:00:00),
-	 * avoid hym8563 read time error
-	 */
+	struct rtc_device *rtc = NULL;
 	struct rtc_time tm_read, tm = {
-		.tm_wday = 0,
-		.tm_year = 121,
+		.tm_wday = 6,
+		.tm_year = 111,
 		.tm_mon = 0,
 		.tm_mday = 1,
 		.tm_hour = 12,
@@ -548,88 +548,137 @@ static int hym8563_probe(struct i2c_client *client,
 		.tm_sec = 0,
 	};
 
-	hym8563 = devm_kzalloc(&client->dev, sizeof(*hym8563), GFP_KERNEL);
-	if (!hym8563)
+	struct device_node *np = client->dev.of_node;
+	unsigned long irq_flags;
+	int result;
+	
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
+		return -ENODEV;
+		
+	hym8563 = devm_kzalloc(&client->dev,sizeof(*hym8563), GFP_KERNEL);
+	if (!hym8563) {
 		return -ENOMEM;
+	}
 
+	gClient = client;
 	hym8563->client = client;
+	hym8563->alarm.enabled = 0;
+	client->irq = 0;
+	mutex_init(&hym8563->mutex);
+	wake_lock_init(&hym8563->wake_lock, WAKE_LOCK_SUSPEND, "rtc_hym8563");
 	i2c_set_clientdata(client, hym8563);
 
-	ret = hym8563_init_device(client);
-	if (ret) {
-		dev_err(&client->dev, "could not init device, %d\n", ret);
-		return ret;
-	}
+	hym8563_init_device(client);
+	hym8563_enable_count(client, 0);
 
-	if (client->irq > 0) {
-		ret = devm_request_threaded_irq(&client->dev, client->irq,
-						NULL, hym8563_irq,
-						IRQF_TRIGGER_LOW | IRQF_ONESHOT,
-						client->name, hym8563);
-		if (ret < 0) {
-			dev_err(&client->dev, "irq %d request failed, %d\n",
-				client->irq, ret);
-			return ret;
-		}
+	// check power down
+	hym8563_i2c_read_regs(client,RTC_SEC,&reg,1);
+	if (reg&0x80) {
+		dev_info(&client->dev, "clock/calendar information is no longer guaranteed\n");
+		hym8563_set_time(client, &tm);
 	}
 
-	if (client->irq > 0 ||
-	    device_property_read_bool(&client->dev, "wakeup-source")) {
-		device_init_wakeup(&client->dev, true);
+	hym8563_read_datetime(client, &tm_read);	//read time from hym8563
+
+	if (((tm_read.tm_year < 70) | (tm_read.tm_year > 137 )) | (tm_read.tm_mon == -1) | (rtc_valid_tm(&tm_read) != 0)) {
+		// if the hym8563 haven't initialized
+		hym8563_set_time(client, &tm);	//initialize the hym8563
 	}
 
-	/* check state of calendar information */
-	ret = i2c_smbus_read_byte_data(client, HYM8563_SEC);
-	if (ret < 0)
-		return ret;
+	client->irq = of_get_named_gpio_flags(np, "irq_gpio", 0,
+		(enum of_gpio_flags *)&irq_flags);
 
-	dev_info(&client->dev, "rtc information is %s\n",
-		(ret & HYM8563_SEC_VL) ? "invalid" : "valid");
+	if (client->irq >= 0) {
+		hym8563->irq = gpio_to_irq(client->irq);
 
-	hym8563_rtc_read_time(&client->dev, &tm_read);
-	if ((ret & HYM8563_SEC_VL) || (tm_read.tm_year < 70) || (tm_read.tm_year > 200) ||
-	    (tm_read.tm_mon == -1) || (rtc_valid_tm(&tm_read) != 0))
-		hym8563_rtc_set_time(&client->dev, &tm);
+		result = devm_request_threaded_irq(&client->dev,
+			hym8563->irq, NULL, hym8563_wakeup_irq,
+			irq_flags | IRQF_ONESHOT,
+			client->dev.driver->name, hym8563);
+		if (result) {
+			printk(KERN_ERR "%s:fail to request irq = %d, ret = 0x%x\n",
+				__func__, hym8563->irq, result);
+			goto exit;
+		}
+		enable_irq_wake(hym8563->irq);
+		device_init_wakeup(&client->dev, 1);
+	}
 
-	hym8563->rtc = devm_rtc_device_register(&client->dev, client->name,
-						&hym8563_rtc_ops, THIS_MODULE);
-	if (IS_ERR(hym8563->rtc))
-		return PTR_ERR(hym8563->rtc);
+	rtc = devm_rtc_device_register(&client->dev,
+		client->name,
+		&hym8563_rtc_ops, THIS_MODULE);
+	if (IS_ERR(rtc)) {
+		rc = PTR_ERR(rtc);
+		rtc = NULL;
+		goto exit;
+	}
 
-	/* the hym8563 alarm only supports a minute accuracy */
-	hym8563->rtc->uie_unsupported = 1;
+	hym8563->rtc = rtc;
+	return 0;
 
-#ifdef CONFIG_COMMON_CLK
-	hym8563_clkout_register_clk(hym8563);
-#endif
+exit:
+	if (hym8563) {
+		wake_lock_destroy(&hym8563->wake_lock);
+	}
 
+	return rc;
+}
+
+static int  hym8563_remove(struct i2c_client *client)
+{
+	struct hym8563 *hym8563 = i2c_get_clientdata(client);
+	wake_lock_destroy(&hym8563->wake_lock);
 	return 0;
 }
 
+void hym8563_shutdown(struct i2c_client * client)
+{
+	u8 regs[2];
+	int ret;
+
+	// disable clkout
+	regs[0] = 0x00;
+	ret = hym8563_i2c_set_regs(client, RTC_CLKOUT, regs, 1);
+	if (ret<0)
+		printk("rtc shutdown is error\n");
+}
+
 static const struct i2c_device_id hym8563_id[] = {
-	{ "hym8563", 0 },
-	{},
+	{ "rtc_hym8563", 0 },
+	{}
 };
 MODULE_DEVICE_TABLE(i2c, hym8563_id);
 
-static const struct of_device_id hym8563_dt_idtable[] = {
-	{ .compatible = "haoyu,hym8563" },
+static struct of_device_id rtc_dt_ids[] = {
+	{ .compatible = "rtc,hym8563" },
 	{},
 };
-MODULE_DEVICE_TABLE(of, hym8563_dt_idtable);
 
-static struct i2c_driver hym8563_driver = {
+struct i2c_driver hym8563_driver = {
 	.driver		= {
-		.name	= "rtc-hym8563",
-		.pm	= &hym8563_pm_ops,
-		.of_match_table	= hym8563_dt_idtable,
+		.name	= "rtc_hym8563",
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(rtc_dt_ids),
 	},
 	.probe		= hym8563_probe,
+	.remove		= hym8563_remove,
+	//.shutdown=hym8563_shutdown,
 	.id_table	= hym8563_id,
 };
 
-module_i2c_driver(hym8563_driver);
+static int __init hym8563_init(void)
+{
+	return i2c_add_driver(&hym8563_driver);
+}
+
+static void __exit hym8563_exit(void)
+{
+	i2c_del_driver(&hym8563_driver);
+}
 
-MODULE_AUTHOR("Heiko Stuebner <heiko@sntech.de>");
+MODULE_AUTHOR("lhh lhh@rock-chips.com");
 MODULE_DESCRIPTION("HYM8563 RTC driver");
 MODULE_LICENSE("GPL");
+
+module_init(hym8563_init);
+module_exit(hym8563_exit);
diff --git a/drivers/rtc/rtc-hym8563.h b/drivers/rtc/rtc-hym8563.h
new file mode 100644
index 000000000000..1f11cf8a6713
--- /dev/null
+++ b/drivers/rtc/rtc-hym8563.h
@@ -0,0 +1,57 @@
+/* drivers/rtc/rtc-HYM8563.h - driver for HYM8563
+ *
+ * Copyright (C) 2010 ROCKCHIP, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _DRIVERS_HYM8563_H
+#define _DRIVERS_HYM8563_H
+
+#define RTC_CTL1    0x00
+#define RTC_CTL2    0x01
+#define RTC_SEC     0x02
+#define RTC_MIN     0x03
+#define RTC_HOUR    0x04
+#define RTC_DAY     0x05
+#define RTC_WEEK    0x06
+#define RTC_MON     0x07
+#define RTC_YEAR    0x08
+#define RTC_A_MIN   0x09
+#define RTC_A_HOUR  0x0A
+#define RTC_A_DAY   0x0B
+#define RTC_A_WEEK  0x0C
+#define RTC_CLKOUT  0x0D
+#define RTC_T_CTL   0x0E
+#define RTC_T_COUNT 0x0F
+#define CENTURY     0x80
+#define TI          0x10
+#define AF          0x08
+#define TF          0x04
+#define AIE         0x02
+#define TIE         0x01
+#define FE          0x80
+#define TE          0x80
+#define FD1         0x02
+#define FD0         0x01
+#define TD1         0x02
+#define TD0         0x01
+#define VL          0x80
+
+#define HYM8563_REG_LEN          0x10
+#define HYM8563_RTC_SECTION_LEN  0x07
+
+struct hym8563_platform_data {
+	unsigned int speed;
+	unsigned int mode;
+	unsigned int reg_byte_cnt;
+};
+
+#endif /* _DRIVERS_HYM8563_H */
-- 
2.30.2

