From c9733d079e3f15e215332059612365af947246c0 Mon Sep 17 00:00:00 2001
From: Anton Kikin <a.kikin@tano-systems.com>
Date: Wed, 5 May 2021 02:24:01 +0300
Subject: [PATCH 07/17] libfstools: Move get_cmdline_val to common

Signed-off-by: Anton Kikin <a.kikin@tano-systems.com>
---
 libfstools/common.c   | 40 ++++++++++++++++++++++++++++++++++++++++
 libfstools/common.h   |  2 ++
 libfstools/partname.c | 40 +++-------------------------------------
 3 files changed, 45 insertions(+), 37 deletions(-)

diff --git a/libfstools/common.c b/libfstools/common.c
index e5b7bc3..7efba61 100644
--- a/libfstools/common.c
+++ b/libfstools/common.c
@@ -176,3 +176,43 @@ do_format:
 
 	return ret;
 }
+
+/* adapted from procd/utils.c -> should go to libubox */
+char* get_var_from_file(const char* filename, const char* name, char* out, int len)
+{
+	char line[1024], *c, *sptr;
+	int fd = open(filename, O_RDONLY);
+	if (fd == -1)
+		return NULL;
+
+	ssize_t r = read(fd, line, sizeof(line) - 1);
+	close(fd);
+
+	if (r <= 0)
+		return NULL;
+
+	line[r] = 0;
+
+	for (c = strtok_r(line, " \t\n", &sptr); c;
+			c = strtok_r(NULL, " \t\n", &sptr)) {
+		char *sep = strchr(c, '=');
+		if (sep == NULL)
+			continue;
+
+		ssize_t klen = sep - c;
+		if (strncmp(name, c, klen) || name[klen] != 0)
+			continue;
+
+		strncpy(out, &sep[1], len);
+		out[len-1] = '\0';
+		return out;
+	}
+
+	return NULL;
+}
+
+/* from procd/utils.c -> should go to libubox */
+char* get_cmdline_val(const char* name, char* out, int len)
+{
+	return get_var_from_file("/proc/cmdline", name, out, len);
+}
diff --git a/libfstools/common.h b/libfstools/common.h
index b5cc692..ec81951 100644
--- a/libfstools/common.h
+++ b/libfstools/common.h
@@ -25,3 +25,5 @@ int read_uint_from_file(char *dirname, char *filename, unsigned int *i);
 char *read_string_from_file(const char *dirname, const char *filename, char *buf, size_t bufsz);
 int block_file_identify(FILE *f, uint64_t offset);
 int block_volume_format(struct volume *v, uint64_t offset, const char *bdev);
+char* get_cmdline_val(const char* name, char* out, int len);
+char* get_var_from_file(const char* filename, const char* name, char* out, int len);
diff --git a/libfstools/partname.c b/libfstools/partname.c
index 53ee600..ed81c05 100644
--- a/libfstools/partname.c
+++ b/libfstools/partname.c
@@ -61,40 +61,6 @@ static int partname_volume_init(struct volume *v)
 	return block_volume_format(v, 0, p->parent_dev.devpathstr);
 }
 
-/* adapted from procd/utils.c -> should go to libubox */
-static char* get_var_from_file(const char* filename, const char* name, char* out, int len)
-{
-	char line[1024], *c, *sptr;
-	int fd = open(filename, O_RDONLY);
-	if (fd == -1)
-		return NULL;
-
-	ssize_t r = read(fd, line, sizeof(line) - 1);
-	close(fd);
-
-	if (r <= 0)
-		return NULL;
-
-	line[r] = 0;
-
-	for (c = strtok_r(line, " \t\n", &sptr); c;
-			c = strtok_r(NULL, " \t\n", &sptr)) {
-		char *sep = strchr(c, '=');
-		if (sep == NULL)
-			continue;
-
-		ssize_t klen = sep - c;
-		if (strncmp(name, c, klen) || name[klen] != 0)
-			continue;
-
-		strncpy(out, &sep[1], len);
-		out[len-1] = '\0';
-		return out;
-	}
-
-	return NULL;
-}
-
 static char *rootdevname(char *devpath) {
 	int l;
 
@@ -125,7 +91,7 @@ static struct volume *partname_volume_find(char *name)
 	bool has_root = false;
 	glob_t gl;
 
-	if (get_var_from_file("/proc/cmdline", "fstools_ignore_partname", rootparam, sizeof(rootparam))) {
+	if (get_cmdline_val("fstools_ignore_partname", rootparam, sizeof(rootparam))) {
 		if (!strcmp("1", rootparam))
 			return NULL;
 	}
@@ -137,12 +103,12 @@ static struct volume *partname_volume_find(char *name)
 	 * partition should be done by providing fstools_partname_fallback_scan=1 and skip partname scan
 	 * in every other case.
 	 */
-	if (get_var_from_file("/proc/cmdline", "fstools_partname_fallback_scan", rootparam, sizeof(rootparam))) {
+	if (get_cmdline_val("fstools_partname_fallback_scan", rootparam, sizeof(rootparam))) {
 		if (!strcmp("1", rootparam))
 			allow_fallback = true;
 	}
 
-	if (get_var_from_file("/proc/cmdline", "root", rootparam, sizeof(rootparam)))
+	if (get_cmdline_val("root", rootparam, sizeof(rootparam)))
 		has_root = true;
 
 	if (has_root && rootparam[0] == '/') {
-- 
2.34.1.windows.1

